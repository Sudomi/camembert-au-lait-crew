// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/soundcloud/soundcloud.proto

package soundcloud // import "ultre.me/calcbiz/pkg/soundcloud"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	ID                   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	AvatarURL            string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Country              string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	FullName             string `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	City                 string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Description          string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	DiscogsName          string `protobuf:"bytes,8,opt,name=discogs_name,json=discogsName,proto3" json:"discogs_name,omitempty"`
	MyspaceName          string `protobuf:"bytes,9,opt,name=myspace_name,json=myspaceName,proto3" json:"myspace_name,omitempty"`
	Website              string `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	WebsiteTitle         string `protobuf:"bytes,11,opt,name=website_title,json=websiteTitle,proto3" json:"website_title,omitempty"`
	Online               bool   `protobuf:"varint,12,opt,name=online,proto3" json:"online,omitempty"`
	TrackCount           uint64 `protobuf:"varint,13,opt,name=track_count,json=trackCount,proto3" json:"track_count,omitempty"`
	PlaylistCount        uint64 `protobuf:"varint,14,opt,name=playlist_count,json=playlistCount,proto3" json:"playlist_count,omitempty"`
	FollowersCount       uint64 `protobuf:"varint,15,opt,name=followers_count,json=followersCount,proto3" json:"followers_count,omitempty"`
	FollowingsCount      uint64 `protobuf:"varint,16,opt,name=followings_count,json=followingsCount,proto3" json:"followings_count,omitempty"`
	PublicFavoritesCount uint64 `protobuf:"varint,17,opt,name=public_favorites_count,json=publicFavoritesCount,proto3" json:"public_favorites_count,omitempty"`
	AvatarData           []byte `protobuf:"bytes,18,opt,name=avatar_data,json=avatarData,proto3" json:"avatar_data,omitempty"`
	Uri                  string `protobuf:"bytes,19,opt,name=uri,proto3" json:"uri,omitempty"`
	Permalink            string `protobuf:"bytes,20,opt,name=permalink,proto3" json:"permalink,omitempty"`
	PermalinkURL         string `protobuf:"bytes,21,opt,name=permalink_url,json=permalinkUrl,proto3" json:"permalink_url,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_soundcloud_205f1aff27f92dc6, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetAvatarURL() string {
	if m != nil {
		return m.AvatarURL
	}
	return ""
}

func (m *User) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *User) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *User) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *User) GetDiscogsName() string {
	if m != nil {
		return m.DiscogsName
	}
	return ""
}

func (m *User) GetMyspaceName() string {
	if m != nil {
		return m.MyspaceName
	}
	return ""
}

func (m *User) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *User) GetWebsiteTitle() string {
	if m != nil {
		return m.WebsiteTitle
	}
	return ""
}

func (m *User) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *User) GetTrackCount() uint64 {
	if m != nil {
		return m.TrackCount
	}
	return 0
}

func (m *User) GetPlaylistCount() uint64 {
	if m != nil {
		return m.PlaylistCount
	}
	return 0
}

func (m *User) GetFollowersCount() uint64 {
	if m != nil {
		return m.FollowersCount
	}
	return 0
}

func (m *User) GetFollowingsCount() uint64 {
	if m != nil {
		return m.FollowingsCount
	}
	return 0
}

func (m *User) GetPublicFavoritesCount() uint64 {
	if m != nil {
		return m.PublicFavoritesCount
	}
	return 0
}

func (m *User) GetAvatarData() []byte {
	if m != nil {
		return m.AvatarData
	}
	return nil
}

func (m *User) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *User) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *User) GetPermalinkURL() string {
	if m != nil {
		return m.PermalinkURL
	}
	return ""
}

type Playlists struct {
	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists" json:"playlists,omitempty"`
}

func (m *Playlists) Reset()         { *m = Playlists{} }
func (m *Playlists) String() string { return proto.CompactTextString(m) }
func (*Playlists) ProtoMessage()    {}
func (*Playlists) Descriptor() ([]byte, []int) {
	return fileDescriptor_soundcloud_205f1aff27f92dc6, []int{1}
}
func (m *Playlists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Playlists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Playlists.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Playlists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Playlists.Merge(dst, src)
}
func (m *Playlists) XXX_Size() int {
	return m.Size()
}
func (m *Playlists) XXX_DiscardUnknown() {
	xxx_messageInfo_Playlists.DiscardUnknown(m)
}

var xxx_messageInfo_Playlists proto.InternalMessageInfo

func (m *Playlists) GetPlaylists() []*Playlist {
	if m != nil {
		return m.Playlists
	}
	return nil
}

type Playlist struct {
	ID            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Title         string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Sharing       string `protobuf:"bytes,4,opt,name=sharing,proto3" json:"sharing,omitempty"`
	EmbeddableBy  string `protobuf:"bytes,5,opt,name=embeddable_by,json=embeddableBy,proto3" json:"embeddable_by,omitempty"`
	PurchaseUrl   string `protobuf:"bytes,6,opt,name=purchase_url,json=purchaseUrl,proto3" json:"purchase_url,omitempty"`
	ArtworkUrl    string `protobuf:"bytes,7,opt,name=artwork_url,json=artworkUrl,proto3" json:"artwork_url,omitempty"`
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Duration      uint64 `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Genre         string `protobuf:"bytes,10,opt,name=genre,proto3" json:"genre,omitempty"`
	SharedToCount uint64 `protobuf:"varint,11,opt,name=shared_to_count,json=sharedToCount,proto3" json:"shared_to_count,omitempty"`
	TagList       string `protobuf:"bytes,12,opt,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	// uint64 release = 13;
	ReleaseDay   uint32   `protobuf:"varint,14,opt,name=release_day,json=releaseDay,proto3" json:"release_day,omitempty"`
	ReleaseMonth uint32   `protobuf:"varint,15,opt,name=release_month,json=releaseMonth,proto3" json:"release_month,omitempty"`
	ReleaseYear  uint32   `protobuf:"varint,16,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"`
	Streamable   bool     `protobuf:"varint,17,opt,name=streamable,proto3" json:"streamable,omitempty"`
	Downloadable bool     `protobuf:"varint,18,opt,name=downloadable,proto3" json:"downloadable,omitempty"`
	Ean          string   `protobuf:"bytes,19,opt,name=ean,proto3" json:"ean,omitempty"`
	PlaylistType string   `protobuf:"bytes,20,opt,name=playlist_type,json=playlistType,proto3" json:"playlist_type,omitempty"`
	Tracks       []*Track `protobuf:"bytes,21,rep,name=tracks" json:"tracks,omitempty"`
	Uri          string   `protobuf:"bytes,22,opt,name=uri,proto3" json:"uri,omitempty"`
	Label        *User    `protobuf:"bytes,23,opt,name=label" json:"label,omitempty"`
	LabelId      uint64   `protobuf:"varint,24,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	LabelName    string   `protobuf:"bytes,25,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	User         *User    `protobuf:"bytes,26,opt,name=user" json:"user,omitempty"`
	UserId       uint64   `protobuf:"varint,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permalink    string   `protobuf:"bytes,28,opt,name=permalink,proto3" json:"permalink,omitempty"`
	PermalinkUrl string   `protobuf:"bytes,29,opt,name=permalink_url,json=permalinkUrl,proto3" json:"permalink_url,omitempty"`
}

func (m *Playlist) Reset()         { *m = Playlist{} }
func (m *Playlist) String() string { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()    {}
func (*Playlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_soundcloud_205f1aff27f92dc6, []int{2}
}
func (m *Playlist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Playlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Playlist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Playlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Playlist.Merge(dst, src)
}
func (m *Playlist) XXX_Size() int {
	return m.Size()
}
func (m *Playlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Playlist.DiscardUnknown(m)
}

var xxx_messageInfo_Playlist proto.InternalMessageInfo

func (m *Playlist) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Playlist) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Playlist) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Playlist) GetSharing() string {
	if m != nil {
		return m.Sharing
	}
	return ""
}

func (m *Playlist) GetEmbeddableBy() string {
	if m != nil {
		return m.EmbeddableBy
	}
	return ""
}

func (m *Playlist) GetPurchaseUrl() string {
	if m != nil {
		return m.PurchaseUrl
	}
	return ""
}

func (m *Playlist) GetArtworkUrl() string {
	if m != nil {
		return m.ArtworkUrl
	}
	return ""
}

func (m *Playlist) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Playlist) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Playlist) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *Playlist) GetSharedToCount() uint64 {
	if m != nil {
		return m.SharedToCount
	}
	return 0
}

func (m *Playlist) GetTagList() string {
	if m != nil {
		return m.TagList
	}
	return ""
}

func (m *Playlist) GetReleaseDay() uint32 {
	if m != nil {
		return m.ReleaseDay
	}
	return 0
}

func (m *Playlist) GetReleaseMonth() uint32 {
	if m != nil {
		return m.ReleaseMonth
	}
	return 0
}

func (m *Playlist) GetReleaseYear() uint32 {
	if m != nil {
		return m.ReleaseYear
	}
	return 0
}

func (m *Playlist) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *Playlist) GetDownloadable() bool {
	if m != nil {
		return m.Downloadable
	}
	return false
}

func (m *Playlist) GetEan() string {
	if m != nil {
		return m.Ean
	}
	return ""
}

func (m *Playlist) GetPlaylistType() string {
	if m != nil {
		return m.PlaylistType
	}
	return ""
}

func (m *Playlist) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *Playlist) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Playlist) GetLabel() *User {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Playlist) GetLabelId() uint64 {
	if m != nil {
		return m.LabelId
	}
	return 0
}

func (m *Playlist) GetLabelName() string {
	if m != nil {
		return m.LabelName
	}
	return ""
}

func (m *Playlist) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Playlist) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Playlist) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Playlist) GetPermalinkUrl() string {
	if m != nil {
		return m.PermalinkUrl
	}
	return ""
}

type Tracks struct {
	Tracks []*Track `protobuf:"bytes,1,rep,name=tracks" json:"tracks,omitempty"`
}

func (m *Tracks) Reset()         { *m = Tracks{} }
func (m *Tracks) String() string { return proto.CompactTextString(m) }
func (*Tracks) ProtoMessage()    {}
func (*Tracks) Descriptor() ([]byte, []int) {
	return fileDescriptor_soundcloud_205f1aff27f92dc6, []int{3}
}
func (m *Tracks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tracks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tracks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tracks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracks.Merge(dst, src)
}
func (m *Tracks) XXX_Size() int {
	return m.Size()
}
func (m *Tracks) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracks.DiscardUnknown(m)
}

var xxx_messageInfo_Tracks proto.InternalMessageInfo

func (m *Tracks) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

type Track struct {
	ID            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     string `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Title         string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Sharing       string `protobuf:"bytes,4,opt,name=Sharing,proto3" json:"Sharing,omitempty"`
	EmbeddableBy  string `protobuf:"bytes,5,opt,name=EmbeddableBy,proto3" json:"EmbeddableBy,omitempty"`
	PurchaseUrl   string `protobuf:"bytes,6,opt,name=PurchaseUrl,proto3" json:"PurchaseUrl,omitempty"`
	ArtworkUrl    string `protobuf:"bytes,7,opt,name=ArtworkUrl,proto3" json:"ArtworkUrl,omitempty"`
	Description   string `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	Duration      uint64 `protobuf:"varint,9,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Genre         string `protobuf:"bytes,10,opt,name=Genre,proto3" json:"Genre,omitempty"`
	SharedToCount uint64 `protobuf:"varint,11,opt,name=SharedToCount,proto3" json:"SharedToCount,omitempty"`
	TagList       string `protobuf:"bytes,12,opt,name=TagList,proto3" json:"TagList,omitempty"`
	// uint64 Release = 13;
	ReleaseDay          uint32  `protobuf:"varint,14,opt,name=ReleaseDay,proto3" json:"ReleaseDay,omitempty"`
	ReleaseMonth        uint32  `protobuf:"varint,15,opt,name=ReleaseMonth,proto3" json:"ReleaseMonth,omitempty"`
	ReleaseYear         uint32  `protobuf:"varint,16,opt,name=ReleaseYear,proto3" json:"ReleaseYear,omitempty"`
	Streamable          bool    `protobuf:"varint,17,opt,name=Streamable,proto3" json:"Streamable,omitempty"`
	Downloadable        bool    `protobuf:"varint,18,opt,name=Downloadable,proto3" json:"Downloadable,omitempty"`
	State               string  `protobuf:"bytes,19,opt,name=State,proto3" json:"State,omitempty"`
	License             string  `protobuf:"bytes,20,opt,name=License,proto3" json:"License,omitempty"`
	TrackType           string  `protobuf:"bytes,21,opt,name=TrackType,proto3" json:"TrackType,omitempty"`
	WaveformUrl         string  `protobuf:"bytes,22,opt,name=WaveformUrl,proto3" json:"WaveformUrl,omitempty"`
	DownloadUrl         string  `protobuf:"bytes,23,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`
	StreamUrl           string  `protobuf:"bytes,24,opt,name=StreamUrl,proto3" json:"StreamUrl,omitempty"`
	VideoUrl            string  `protobuf:"bytes,25,opt,name=VideoUrl,proto3" json:"VideoUrl,omitempty"`
	Bpm                 float32 `protobuf:"fixed32,26,opt,name=Bpm,proto3" json:"Bpm,omitempty"`
	Commentable         bool    `protobuf:"varint,27,opt,name=Commentable,proto3" json:"Commentable,omitempty"`
	ISRC                string  `protobuf:"bytes,28,opt,name=ISRC,proto3" json:"ISRC,omitempty"`
	KeySignature        string  `protobuf:"bytes,29,opt,name=KeySignature,proto3" json:"KeySignature,omitempty"`
	CommentCount        uint64  `protobuf:"varint,30,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	DownloadCount       uint64  `protobuf:"varint,31,opt,name=DownloadCount,proto3" json:"DownloadCount,omitempty"`
	PlaybackCount       uint64  `protobuf:"varint,32,opt,name=PlaybackCount,proto3" json:"PlaybackCount,omitempty"`
	FavoritingsCount    uint64  `protobuf:"varint,33,opt,name=FavoritingsCount,proto3" json:"FavoritingsCount,omitempty"`
	OriginalFormat      string  `protobuf:"bytes,34,opt,name=OriginalFormat,proto3" json:"OriginalFormat,omitempty"`
	OriginalContentSize uint64  `protobuf:"varint,35,opt,name=OriginalContentSize,proto3" json:"OriginalContentSize,omitempty"`
	// App created_with = 36;
	AssetData    []byte `protobuf:"bytes,37,opt,name=AssetData,proto3" json:"AssetData,omitempty"`
	ArtworkData  []byte `protobuf:"bytes,38,opt,name=ArtworkData,proto3" json:"ArtworkData,omitempty"`
	UserFavorite bool   `protobuf:"varint,39,opt,name=UserFavorite,proto3" json:"UserFavorite,omitempty"`
	Uri          string `protobuf:"bytes,40,opt,name=uri,proto3" json:"uri,omitempty"`
	Label        *User  `protobuf:"bytes,41,opt,name=label" json:"label,omitempty"`
	LabelId      uint64 `protobuf:"varint,42,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	LabelName    string `protobuf:"bytes,43,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	User         *User  `protobuf:"bytes,44,opt,name=user" json:"user,omitempty"`
	UserId       uint64 `protobuf:"varint,45,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permalink    string `protobuf:"bytes,46,opt,name=permalink,proto3" json:"permalink,omitempty"`
	PermalinkUrl string `protobuf:"bytes,47,opt,name=permalink_url,json=permalinkUrl,proto3" json:"permalink_url,omitempty"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_soundcloud_205f1aff27f92dc6, []int{4}
}
func (m *Track) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Track.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(dst, src)
}
func (m *Track) XXX_Size() int {
	return m.Size()
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Track) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Track) GetSharing() string {
	if m != nil {
		return m.Sharing
	}
	return ""
}

func (m *Track) GetEmbeddableBy() string {
	if m != nil {
		return m.EmbeddableBy
	}
	return ""
}

func (m *Track) GetPurchaseUrl() string {
	if m != nil {
		return m.PurchaseUrl
	}
	return ""
}

func (m *Track) GetArtworkUrl() string {
	if m != nil {
		return m.ArtworkUrl
	}
	return ""
}

func (m *Track) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Track) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Track) GetGenre() string {
	if m != nil {
		return m.Genre
	}
	return ""
}

func (m *Track) GetSharedToCount() uint64 {
	if m != nil {
		return m.SharedToCount
	}
	return 0
}

func (m *Track) GetTagList() string {
	if m != nil {
		return m.TagList
	}
	return ""
}

func (m *Track) GetReleaseDay() uint32 {
	if m != nil {
		return m.ReleaseDay
	}
	return 0
}

func (m *Track) GetReleaseMonth() uint32 {
	if m != nil {
		return m.ReleaseMonth
	}
	return 0
}

func (m *Track) GetReleaseYear() uint32 {
	if m != nil {
		return m.ReleaseYear
	}
	return 0
}

func (m *Track) GetStreamable() bool {
	if m != nil {
		return m.Streamable
	}
	return false
}

func (m *Track) GetDownloadable() bool {
	if m != nil {
		return m.Downloadable
	}
	return false
}

func (m *Track) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Track) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Track) GetTrackType() string {
	if m != nil {
		return m.TrackType
	}
	return ""
}

func (m *Track) GetWaveformUrl() string {
	if m != nil {
		return m.WaveformUrl
	}
	return ""
}

func (m *Track) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *Track) GetStreamUrl() string {
	if m != nil {
		return m.StreamUrl
	}
	return ""
}

func (m *Track) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *Track) GetBpm() float32 {
	if m != nil {
		return m.Bpm
	}
	return 0
}

func (m *Track) GetCommentable() bool {
	if m != nil {
		return m.Commentable
	}
	return false
}

func (m *Track) GetISRC() string {
	if m != nil {
		return m.ISRC
	}
	return ""
}

func (m *Track) GetKeySignature() string {
	if m != nil {
		return m.KeySignature
	}
	return ""
}

func (m *Track) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *Track) GetDownloadCount() uint64 {
	if m != nil {
		return m.DownloadCount
	}
	return 0
}

func (m *Track) GetPlaybackCount() uint64 {
	if m != nil {
		return m.PlaybackCount
	}
	return 0
}

func (m *Track) GetFavoritingsCount() uint64 {
	if m != nil {
		return m.FavoritingsCount
	}
	return 0
}

func (m *Track) GetOriginalFormat() string {
	if m != nil {
		return m.OriginalFormat
	}
	return ""
}

func (m *Track) GetOriginalContentSize() uint64 {
	if m != nil {
		return m.OriginalContentSize
	}
	return 0
}

func (m *Track) GetAssetData() []byte {
	if m != nil {
		return m.AssetData
	}
	return nil
}

func (m *Track) GetArtworkData() []byte {
	if m != nil {
		return m.ArtworkData
	}
	return nil
}

func (m *Track) GetUserFavorite() bool {
	if m != nil {
		return m.UserFavorite
	}
	return false
}

func (m *Track) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Track) GetLabel() *User {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Track) GetLabelId() uint64 {
	if m != nil {
		return m.LabelId
	}
	return 0
}

func (m *Track) GetLabelName() string {
	if m != nil {
		return m.LabelName
	}
	return ""
}

func (m *Track) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Track) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Track) GetPermalink() string {
	if m != nil {
		return m.Permalink
	}
	return ""
}

func (m *Track) GetPermalinkUrl() string {
	if m != nil {
		return m.PermalinkUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "calcbiz.soundcloud.User")
	proto.RegisterType((*Playlists)(nil), "calcbiz.soundcloud.Playlists")
	proto.RegisterType((*Playlist)(nil), "calcbiz.soundcloud.Playlist")
	proto.RegisterType((*Tracks)(nil), "calcbiz.soundcloud.Tracks")
	proto.RegisterType((*Track)(nil), "calcbiz.soundcloud.Track")
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ID))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.AvatarURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.AvatarURL)))
		i += copy(dAtA[i:], m.AvatarURL)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.DiscogsName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.DiscogsName)))
		i += copy(dAtA[i:], m.DiscogsName)
	}
	if len(m.MyspaceName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.MyspaceName)))
		i += copy(dAtA[i:], m.MyspaceName)
	}
	if len(m.Website) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Website)))
		i += copy(dAtA[i:], m.Website)
	}
	if len(m.WebsiteTitle) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.WebsiteTitle)))
		i += copy(dAtA[i:], m.WebsiteTitle)
	}
	if m.Online {
		dAtA[i] = 0x60
		i++
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TrackCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.TrackCount))
	}
	if m.PlaylistCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.PlaylistCount))
	}
	if m.FollowersCount != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.FollowersCount))
	}
	if m.FollowingsCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.FollowingsCount))
	}
	if m.PublicFavoritesCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.PublicFavoritesCount))
	}
	if len(m.AvatarData) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.AvatarData)))
		i += copy(dAtA[i:], m.AvatarData)
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if len(m.Permalink) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Permalink)))
		i += copy(dAtA[i:], m.Permalink)
	}
	if len(m.PermalinkURL) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PermalinkURL)))
		i += copy(dAtA[i:], m.PermalinkURL)
	}
	return i, nil
}

func (m *Playlists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Playlists) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Playlists) > 0 {
		for _, msg := range m.Playlists {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSoundcloud(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Playlist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Playlist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ID))
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Sharing) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Sharing)))
		i += copy(dAtA[i:], m.Sharing)
	}
	if len(m.EmbeddableBy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.EmbeddableBy)))
		i += copy(dAtA[i:], m.EmbeddableBy)
	}
	if len(m.PurchaseUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PurchaseUrl)))
		i += copy(dAtA[i:], m.PurchaseUrl)
	}
	if len(m.ArtworkUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.ArtworkUrl)))
		i += copy(dAtA[i:], m.ArtworkUrl)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.Duration))
	}
	if len(m.Genre) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Genre)))
		i += copy(dAtA[i:], m.Genre)
	}
	if m.SharedToCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.SharedToCount))
	}
	if len(m.TagList) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.TagList)))
		i += copy(dAtA[i:], m.TagList)
	}
	if m.ReleaseDay != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseDay))
	}
	if m.ReleaseMonth != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseMonth))
	}
	if m.ReleaseYear != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseYear))
	}
	if m.Streamable {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Streamable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Downloadable {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Downloadable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ean) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Ean)))
		i += copy(dAtA[i:], m.Ean)
	}
	if len(m.PlaylistType) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PlaylistType)))
		i += copy(dAtA[i:], m.PlaylistType)
	}
	if len(m.Tracks) > 0 {
		for _, msg := range m.Tracks {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSoundcloud(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if m.Label != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.Label.Size()))
		n1, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.LabelId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.LabelId))
	}
	if len(m.LabelName) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.LabelName)))
		i += copy(dAtA[i:], m.LabelName)
	}
	if m.User != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.User.Size()))
		n2, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UserId != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.UserId))
	}
	if len(m.Permalink) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Permalink)))
		i += copy(dAtA[i:], m.Permalink)
	}
	if len(m.PermalinkUrl) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PermalinkUrl)))
		i += copy(dAtA[i:], m.PermalinkUrl)
	}
	return i, nil
}

func (m *Tracks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tracks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tracks) > 0 {
		for _, msg := range m.Tracks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSoundcloud(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Track) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Track) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ID))
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Sharing) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Sharing)))
		i += copy(dAtA[i:], m.Sharing)
	}
	if len(m.EmbeddableBy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.EmbeddableBy)))
		i += copy(dAtA[i:], m.EmbeddableBy)
	}
	if len(m.PurchaseUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PurchaseUrl)))
		i += copy(dAtA[i:], m.PurchaseUrl)
	}
	if len(m.ArtworkUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.ArtworkUrl)))
		i += copy(dAtA[i:], m.ArtworkUrl)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Duration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.Duration))
	}
	if len(m.Genre) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Genre)))
		i += copy(dAtA[i:], m.Genre)
	}
	if m.SharedToCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.SharedToCount))
	}
	if len(m.TagList) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.TagList)))
		i += copy(dAtA[i:], m.TagList)
	}
	if m.ReleaseDay != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseDay))
	}
	if m.ReleaseMonth != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseMonth))
	}
	if m.ReleaseYear != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.ReleaseYear))
	}
	if m.Streamable {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Streamable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Downloadable {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Downloadable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.License) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.TrackType) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.TrackType)))
		i += copy(dAtA[i:], m.TrackType)
	}
	if len(m.WaveformUrl) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.WaveformUrl)))
		i += copy(dAtA[i:], m.WaveformUrl)
	}
	if len(m.DownloadUrl) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.DownloadUrl)))
		i += copy(dAtA[i:], m.DownloadUrl)
	}
	if len(m.StreamUrl) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.StreamUrl)))
		i += copy(dAtA[i:], m.StreamUrl)
	}
	if len(m.VideoUrl) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.VideoUrl)))
		i += copy(dAtA[i:], m.VideoUrl)
	}
	if m.Bpm != 0 {
		dAtA[i] = 0xd5
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Bpm))))
		i += 4
	}
	if m.Commentable {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.Commentable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ISRC) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.ISRC)))
		i += copy(dAtA[i:], m.ISRC)
	}
	if len(m.KeySignature) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.KeySignature)))
		i += copy(dAtA[i:], m.KeySignature)
	}
	if m.CommentCount != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.CommentCount))
	}
	if m.DownloadCount != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.DownloadCount))
	}
	if m.PlaybackCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.PlaybackCount))
	}
	if m.FavoritingsCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.FavoritingsCount))
	}
	if len(m.OriginalFormat) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.OriginalFormat)))
		i += copy(dAtA[i:], m.OriginalFormat)
	}
	if m.OriginalContentSize != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.OriginalContentSize))
	}
	if len(m.AssetData) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.AssetData)))
		i += copy(dAtA[i:], m.AssetData)
	}
	if len(m.ArtworkData) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.ArtworkData)))
		i += copy(dAtA[i:], m.ArtworkData)
	}
	if m.UserFavorite {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if m.UserFavorite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if m.Label != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.Label.Size()))
		n3, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LabelId != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.LabelId))
	}
	if len(m.LabelName) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.LabelName)))
		i += copy(dAtA[i:], m.LabelName)
	}
	if m.User != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.User.Size()))
		n4, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.UserId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(m.UserId))
	}
	if len(m.Permalink) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.Permalink)))
		i += copy(dAtA[i:], m.Permalink)
	}
	if len(m.PermalinkUrl) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSoundcloud(dAtA, i, uint64(len(m.PermalinkUrl)))
		i += copy(dAtA[i:], m.PermalinkUrl)
	}
	return i, nil
}

func encodeVarintSoundcloud(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSoundcloud(uint64(m.ID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.AvatarURL)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.DiscogsName)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.MyspaceName)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.WebsiteTitle)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.Online {
		n += 2
	}
	if m.TrackCount != 0 {
		n += 1 + sovSoundcloud(uint64(m.TrackCount))
	}
	if m.PlaylistCount != 0 {
		n += 1 + sovSoundcloud(uint64(m.PlaylistCount))
	}
	if m.FollowersCount != 0 {
		n += 1 + sovSoundcloud(uint64(m.FollowersCount))
	}
	if m.FollowingsCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.FollowingsCount))
	}
	if m.PublicFavoritesCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.PublicFavoritesCount))
	}
	l = len(m.AvatarData)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Permalink)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PermalinkURL)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	return n
}

func (m *Playlists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Playlists) > 0 {
		for _, e := range m.Playlists {
			l = e.Size()
			n += 1 + l + sovSoundcloud(uint64(l))
		}
	}
	return n
}

func (m *Playlist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSoundcloud(uint64(m.ID))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Sharing)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.EmbeddableBy)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PurchaseUrl)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.ArtworkUrl)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSoundcloud(uint64(m.Duration))
	}
	l = len(m.Genre)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.SharedToCount != 0 {
		n += 1 + sovSoundcloud(uint64(m.SharedToCount))
	}
	l = len(m.TagList)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.ReleaseDay != 0 {
		n += 1 + sovSoundcloud(uint64(m.ReleaseDay))
	}
	if m.ReleaseMonth != 0 {
		n += 1 + sovSoundcloud(uint64(m.ReleaseMonth))
	}
	if m.ReleaseYear != 0 {
		n += 2 + sovSoundcloud(uint64(m.ReleaseYear))
	}
	if m.Streamable {
		n += 3
	}
	if m.Downloadable {
		n += 3
	}
	l = len(m.Ean)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PlaylistType)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if len(m.Tracks) > 0 {
		for _, e := range m.Tracks {
			l = e.Size()
			n += 2 + l + sovSoundcloud(uint64(l))
		}
	}
	l = len(m.Uri)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.LabelId != 0 {
		n += 2 + sovSoundcloud(uint64(m.LabelId))
	}
	l = len(m.LabelName)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.UserId != 0 {
		n += 2 + sovSoundcloud(uint64(m.UserId))
	}
	l = len(m.Permalink)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PermalinkUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	return n
}

func (m *Tracks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tracks) > 0 {
		for _, e := range m.Tracks {
			l = e.Size()
			n += 1 + l + sovSoundcloud(uint64(l))
		}
	}
	return n
}

func (m *Track) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSoundcloud(uint64(m.ID))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Sharing)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.EmbeddableBy)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PurchaseUrl)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.ArtworkUrl)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSoundcloud(uint64(m.Duration))
	}
	l = len(m.Genre)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.SharedToCount != 0 {
		n += 1 + sovSoundcloud(uint64(m.SharedToCount))
	}
	l = len(m.TagList)
	if l > 0 {
		n += 1 + l + sovSoundcloud(uint64(l))
	}
	if m.ReleaseDay != 0 {
		n += 1 + sovSoundcloud(uint64(m.ReleaseDay))
	}
	if m.ReleaseMonth != 0 {
		n += 1 + sovSoundcloud(uint64(m.ReleaseMonth))
	}
	if m.ReleaseYear != 0 {
		n += 2 + sovSoundcloud(uint64(m.ReleaseYear))
	}
	if m.Streamable {
		n += 3
	}
	if m.Downloadable {
		n += 3
	}
	l = len(m.State)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.TrackType)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.WaveformUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.DownloadUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.StreamUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.VideoUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.Bpm != 0 {
		n += 6
	}
	if m.Commentable {
		n += 3
	}
	l = len(m.ISRC)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.KeySignature)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.CommentCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.CommentCount))
	}
	if m.DownloadCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.DownloadCount))
	}
	if m.PlaybackCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.PlaybackCount))
	}
	if m.FavoritingsCount != 0 {
		n += 2 + sovSoundcloud(uint64(m.FavoritingsCount))
	}
	l = len(m.OriginalFormat)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.OriginalContentSize != 0 {
		n += 2 + sovSoundcloud(uint64(m.OriginalContentSize))
	}
	l = len(m.AssetData)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.ArtworkData)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.UserFavorite {
		n += 3
	}
	l = len(m.Uri)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.LabelId != 0 {
		n += 2 + sovSoundcloud(uint64(m.LabelId))
	}
	l = len(m.LabelName)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	if m.UserId != 0 {
		n += 2 + sovSoundcloud(uint64(m.UserId))
	}
	l = len(m.Permalink)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	l = len(m.PermalinkUrl)
	if l > 0 {
		n += 2 + l + sovSoundcloud(uint64(l))
	}
	return n
}

func sovSoundcloud(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSoundcloud(x uint64) (n int) {
	return sovSoundcloud(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscogsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscogsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyspaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyspaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackCount", wireType)
			}
			m.TrackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaylistCount", wireType)
			}
			m.PlaylistCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaylistCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowersCount", wireType)
			}
			m.FollowersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowersCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingsCount", wireType)
			}
			m.FollowingsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicFavoritesCount", wireType)
			}
			m.PublicFavoritesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicFavoritesCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarData = append(m.AvatarData[:0], dAtA[iNdEx:postIndex]...)
			if m.AvatarData == nil {
				m.AvatarData = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permalink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permalink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermalinkURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermalinkURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSoundcloud(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSoundcloud
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Playlists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Playlists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Playlists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playlists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playlists = append(m.Playlists, &Playlist{})
			if err := m.Playlists[len(m.Playlists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSoundcloud(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSoundcloud
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Playlist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Playlist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Playlist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddableBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddableBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtworkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtworkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedToCount", wireType)
			}
			m.SharedToCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedToCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDay", wireType)
			}
			m.ReleaseDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseDay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseMonth", wireType)
			}
			m.ReleaseMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseMonth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseYear", wireType)
			}
			m.ReleaseYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseYear |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streamable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streamable = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downloadable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Downloadable = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ean", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ean = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaylistType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaylistType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracks = append(m.Tracks, &Track{})
			if err := m.Tracks[len(m.Tracks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &User{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			m.LabelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permalink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permalink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermalinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermalinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSoundcloud(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSoundcloud
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tracks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tracks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tracks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracks = append(m.Tracks, &Track{})
			if err := m.Tracks[len(m.Tracks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSoundcloud(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSoundcloud
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Track) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Track: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Track: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddableBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddableBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtworkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtworkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedToCount", wireType)
			}
			m.SharedToCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedToCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDay", wireType)
			}
			m.ReleaseDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseDay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseMonth", wireType)
			}
			m.ReleaseMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseMonth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseYear", wireType)
			}
			m.ReleaseYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseYear |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streamable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streamable = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downloadable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Downloadable = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaveformUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaveformUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownloadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bpm", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Bpm = float32(math.Float32frombits(v))
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commentable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Commentable = bool(v != 0)
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISRC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISRC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadCount", wireType)
			}
			m.DownloadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownloadCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackCount", wireType)
			}
			m.PlaybackCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaybackCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavoritingsCount", wireType)
			}
			m.FavoritingsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavoritingsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalContentSize", wireType)
			}
			m.OriginalContentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalContentSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetData = append(m.AssetData[:0], dAtA[iNdEx:postIndex]...)
			if m.AssetData == nil {
				m.AssetData = []byte{}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtworkData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtworkData = append(m.ArtworkData[:0], dAtA[iNdEx:postIndex]...)
			if m.ArtworkData == nil {
				m.ArtworkData = []byte{}
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFavorite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserFavorite = bool(v != 0)
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &User{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			m.LabelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permalink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permalink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermalinkUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSoundcloud
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermalinkUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSoundcloud(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSoundcloud
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSoundcloud(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSoundcloud
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSoundcloud
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSoundcloud
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSoundcloud
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSoundcloud(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSoundcloud = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSoundcloud   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("pkg/soundcloud/soundcloud.proto", fileDescriptor_soundcloud_205f1aff27f92dc6)
}

var fileDescriptor_soundcloud_205f1aff27f92dc6 = []byte{
	// 1394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x97, 0xdd, 0x72, 0x13, 0xb7,
	0x1b, 0xc6, 0x71, 0x48, 0xfc, 0x21, 0xdb, 0x49, 0xfe, 0x02, 0x82, 0x08, 0xc1, 0x36, 0xe1, 0x0f,
	0x18, 0x0a, 0x76, 0x4b, 0xdb, 0x83, 0xb6, 0x47, 0x49, 0x5c, 0x98, 0x4c, 0x29, 0x65, 0xd6, 0x4e,
	0x3b, 0xed, 0x89, 0x47, 0xde, 0x55, 0x36, 0x3b, 0xac, 0x57, 0x1e, 0xad, 0x96, 0x8c, 0xb9, 0x88,
	0x4e, 0x6f, 0xa3, 0x77, 0xd2, 0x83, 0x1e, 0x70, 0xd8, 0x23, 0xa6, 0x13, 0x6e, 0xa4, 0xf3, 0xbe,
	0x92, 0xec, 0x75, 0x3e, 0x4a, 0x39, 0x8a, 0xde, 0x47, 0xcf, 0xae, 0x56, 0xef, 0x3e, 0x3f, 0x65,
	0x4d, 0x9a, 0x93, 0x57, 0x61, 0x37, 0x95, 0x59, 0x12, 0xf8, 0xb1, 0xcc, 0x82, 0xdc, 0xb0, 0x33,
	0x51, 0x52, 0x4b, 0x4a, 0x7d, 0x1e, 0xfb, 0xa3, 0xe8, 0x4d, 0x67, 0x3e, 0xb3, 0xb9, 0x15, 0x4a,
	0x19, 0xc6, 0xa2, 0xcb, 0x27, 0x51, 0x97, 0x27, 0x89, 0xd4, 0x5c, 0x47, 0x32, 0x49, 0xcd, 0x15,
	0x9b, 0x8f, 0xc3, 0x48, 0x1f, 0x65, 0xa3, 0x8e, 0x2f, 0xc7, 0xdd, 0x50, 0x86, 0xb2, 0x8b, 0xf2,
	0x28, 0x3b, 0xc4, 0x0a, 0x0b, 0x1c, 0x19, 0xfb, 0xf6, 0x9f, 0x2b, 0x64, 0xf9, 0x20, 0x15, 0x8a,
	0x6e, 0x90, 0xa5, 0x28, 0x60, 0x85, 0x56, 0xa1, 0xbd, 0xbc, 0x5b, 0x3c, 0x79, 0xd7, 0x5c, 0xda,
	0xef, 0x79, 0x4b, 0x51, 0x40, 0x37, 0x49, 0x39, 0x4b, 0x85, 0x4a, 0xf8, 0x58, 0xb0, 0xa5, 0x56,
	0xa1, 0x5d, 0xf1, 0x66, 0x35, 0x7d, 0x44, 0x08, 0x7f, 0xcd, 0x35, 0x57, 0xc3, 0x4c, 0xc5, 0xec,
	0x32, 0xcc, 0xee, 0xd6, 0x4f, 0xde, 0x35, 0x2b, 0x3b, 0xa8, 0x1e, 0x78, 0xcf, 0xbd, 0x8a, 0x31,
	0x1c, 0xa8, 0x98, 0x32, 0x52, 0xf2, 0x65, 0x96, 0x68, 0x35, 0x65, 0xcb, 0x78, 0x23, 0x57, 0xd2,
	0x9b, 0xa4, 0x72, 0x98, 0xc5, 0xf1, 0x10, 0x17, 0x59, 0x31, 0x8b, 0x80, 0xf0, 0x02, 0x16, 0xa1,
	0x64, 0xd9, 0x8f, 0xf4, 0x94, 0x15, 0x51, 0xc7, 0x31, 0x6d, 0x91, 0x6a, 0x20, 0x52, 0x5f, 0x45,
	0x13, 0xd8, 0x3a, 0x2b, 0xe1, 0x54, 0x5e, 0xa2, 0xb7, 0x49, 0x2d, 0x88, 0x52, 0x5f, 0x86, 0xa9,
	0xb9, 0x6b, 0xd9, 0x5a, 0x8c, 0x86, 0x37, 0xbe, 0x4d, 0x6a, 0xe3, 0x69, 0x3a, 0xe1, 0xbe, 0x30,
	0x96, 0x8a, 0xb1, 0x58, 0x0d, 0x2d, 0x8c, 0x94, 0x8e, 0xc5, 0x28, 0x8d, 0xb4, 0x60, 0xc4, 0x3c,
	0xb2, 0x2d, 0xe9, 0x1d, 0x52, 0xb7, 0xc3, 0xa1, 0x8e, 0x74, 0x2c, 0x58, 0x15, 0xe7, 0x6b, 0x56,
	0x1c, 0x80, 0x46, 0x37, 0x48, 0x51, 0x26, 0x71, 0x94, 0x08, 0x56, 0x6b, 0x15, 0xda, 0x65, 0xcf,
	0x56, 0xb4, 0x49, 0xaa, 0x5a, 0x71, 0xff, 0xd5, 0x10, 0x1b, 0xc0, 0xea, 0xd0, 0x74, 0x8f, 0xa0,
	0xb4, 0x07, 0x0a, 0xbd, 0x4b, 0x56, 0x27, 0x31, 0x9f, 0xc6, 0x51, 0xaa, 0xad, 0x67, 0x15, 0x3d,
	0x75, 0xa7, 0x1a, 0xdb, 0x7d, 0xb2, 0x76, 0x28, 0xe3, 0x58, 0x1e, 0x0b, 0x95, 0x5a, 0xdf, 0x1a,
	0xfa, 0x56, 0x67, 0xb2, 0x31, 0x3e, 0x20, 0xeb, 0x46, 0x89, 0x92, 0xd0, 0x39, 0xd7, 0xd1, 0xb9,
	0x36, 0xd7, 0x8d, 0xf5, 0x0b, 0xb2, 0x31, 0xc9, 0x46, 0x71, 0xe4, 0x0f, 0x0f, 0xf9, 0x6b, 0xa9,
	0x22, 0x2d, 0xdc, 0x05, 0xff, 0xc3, 0x0b, 0xae, 0x9a, 0xd9, 0xa7, 0x6e, 0xd2, 0x5c, 0xd5, 0x24,
	0x55, 0x9b, 0x84, 0x80, 0x6b, 0xce, 0x68, 0xab, 0xd0, 0xae, 0x79, 0x36, 0x1c, 0x3d, 0xae, 0x39,
	0x5d, 0x27, 0x97, 0x33, 0x15, 0xb1, 0x2b, 0xd8, 0x25, 0x18, 0xd2, 0x2d, 0x52, 0x99, 0x08, 0x35,
	0xe6, 0x71, 0x94, 0xbc, 0x62, 0x57, 0x51, 0x9f, 0x0b, 0xf4, 0x4b, 0x52, 0x9f, 0x15, 0x98, 0xae,
	0x6b, 0x98, 0xae, 0xf5, 0x93, 0x77, 0xcd, 0xda, 0x4b, 0x37, 0x01, 0x01, 0xab, 0xcd, 0x6c, 0x07,
	0x2a, 0xde, 0x7e, 0x46, 0x2a, 0x2f, 0x6d, 0x8b, 0x52, 0xfa, 0x35, 0xa9, 0xb8, 0x7e, 0xa5, 0xac,
	0xd0, 0xba, 0xdc, 0xae, 0x3e, 0xd9, 0xea, 0x9c, 0x05, 0xaa, 0xe3, 0xae, 0xf0, 0xe6, 0xf6, 0xed,
	0x5f, 0x4b, 0xa4, 0xec, 0xf4, 0x0b, 0xd9, 0xb8, 0x45, 0x88, 0xaf, 0x04, 0xd7, 0x22, 0x18, 0x72,
	0x6d, 0xe9, 0xa8, 0x58, 0x65, 0x47, 0xd3, 0xab, 0x64, 0xc5, 0x64, 0x03, 0xc9, 0xf0, 0x4c, 0x01,
	0x99, 0x4a, 0x8f, 0xb8, 0x8a, 0x92, 0xd0, 0x61, 0x60, 0x4b, 0xc8, 0x94, 0x18, 0x8f, 0x44, 0x10,
	0xf0, 0x51, 0x2c, 0x86, 0xa3, 0xa9, 0x45, 0xa1, 0x36, 0x17, 0x77, 0xa7, 0x90, 0xda, 0x49, 0xa6,
	0xfc, 0x23, 0x9e, 0x0a, 0xec, 0x8b, 0xc1, 0xa2, 0xea, 0x34, 0x00, 0x0d, 0x5e, 0x86, 0xd2, 0xc7,
	0x52, 0x99, 0xce, 0x19, 0x3a, 0x88, 0x95, 0xc0, 0x70, 0x0a, 0x9f, 0xf2, 0x59, 0x7c, 0x36, 0x49,
	0x39, 0xc8, 0x14, 0x1e, 0x2c, 0xc8, 0xc5, 0xb2, 0x37, 0xab, 0x61, 0x5b, 0xa1, 0x48, 0x94, 0x43,
	0xc2, 0x14, 0xf4, 0x1e, 0x59, 0x83, 0x7d, 0x88, 0x60, 0xa8, 0xa5, 0x0d, 0x4c, 0xd5, 0x64, 0xd6,
	0xc8, 0x03, 0x69, 0x92, 0x72, 0x83, 0x94, 0x35, 0x0f, 0x87, 0xd0, 0x57, 0xa4, 0xa2, 0xe2, 0x95,
	0x34, 0x0f, 0x9f, 0x43, 0x9b, 0x9b, 0xa4, 0xaa, 0x44, 0x2c, 0x60, 0x67, 0x01, 0x9f, 0x62, 0xe4,
	0xeb, 0x1e, 0xb1, 0x52, 0x8f, 0x4f, 0xa1, 0x41, 0xce, 0x30, 0x96, 0x89, 0x3e, 0xc2, 0xb4, 0xd7,
	0xbd, 0x9a, 0x15, 0xbf, 0x07, 0x0d, 0x1a, 0xe4, 0x4c, 0x53, 0xc1, 0x15, 0xe6, 0xbc, 0xee, 0xb9,
	0x3b, 0xff, 0x2c, 0xb8, 0xa2, 0x0d, 0x42, 0x52, 0xad, 0x04, 0x1f, 0x43, 0x4f, 0x31, 0xd7, 0x65,
	0x2f, 0xa7, 0xd0, 0x6d, 0x52, 0x0b, 0xe4, 0x71, 0x12, 0x4b, 0x8e, 0x5d, 0xc7, 0x38, 0x97, 0xbd,
	0x05, 0x0d, 0x02, 0x2d, 0x78, 0xe2, 0x02, 0x2d, 0x78, 0x02, 0x4f, 0x37, 0x83, 0x56, 0x4f, 0x27,
	0xc2, 0x86, 0xba, 0xe6, 0xc4, 0xc1, 0x74, 0x22, 0xe8, 0x67, 0xa4, 0x88, 0x9c, 0xa7, 0xec, 0x1a,
	0x06, 0xf2, 0xc6, 0x79, 0x81, 0x1c, 0x80, 0xc3, 0xb3, 0x46, 0x87, 0xce, 0xc6, 0x1c, 0x9d, 0x0e,
	0x59, 0x89, 0xf9, 0x48, 0xc4, 0xec, 0x7a, 0xab, 0xd0, 0xae, 0x3e, 0x61, 0xe7, 0xdd, 0x03, 0x0e,
	0x75, 0xcf, 0xd8, 0xa0, 0xe7, 0x38, 0x18, 0x46, 0x01, 0x63, 0xf8, 0x52, 0x4a, 0x58, 0xef, 0x63,
	0x84, 0xcd, 0x14, 0x1e, 0x81, 0x37, 0x4c, 0x84, 0x51, 0x79, 0x61, 0x4e, 0xf8, 0x65, 0x38, 0xed,
	0xd9, 0xe6, 0x07, 0x16, 0x42, 0x17, 0xbd, 0x4e, 0x4a, 0xf0, 0x17, 0x96, 0xb9, 0x89, 0xcb, 0x14,
	0xa1, 0xdc, 0x0f, 0x16, 0x59, 0xdf, 0x3a, 0xcd, 0xfa, 0x9d, 0xd3, 0xac, 0xdf, 0xb2, 0x8d, 0xcb,
	0x93, 0xfd, 0x0d, 0x29, 0x0e, 0x4c, 0x3f, 0xe6, 0x2d, 0x2c, 0xfc, 0xc7, 0x16, 0x6e, 0xff, 0x5e,
	0x25, 0x2b, 0xa8, 0x5c, 0x88, 0xf2, 0x16, 0xa9, 0xec, 0x39, 0x70, 0x1d, 0xc9, 0x7b, 0x79, 0x92,
	0x07, 0x79, 0x92, 0x07, 0x8e, 0xe4, 0xfe, 0x22, 0xc9, 0xb6, 0x84, 0x00, 0x7d, 0x9b, 0x83, 0xd6,
	0x81, 0x9c, 0xd7, 0x00, 0xc2, 0x97, 0x73, 0x68, 0x1d, 0xc7, 0x39, 0x09, 0x62, 0xba, 0x33, 0x83,
	0xd6, 0x61, 0xbc, 0xb3, 0x80, 0x71, 0xef, 0x2c, 0xc6, 0xbd, 0x45, 0x8c, 0x7b, 0xa7, 0x30, 0xee,
	0xe5, 0x30, 0x7e, 0x96, 0xc7, 0x18, 0x0b, 0xfa, 0x7f, 0x52, 0xef, 0xe7, 0x79, 0x75, 0x10, 0x2f,
	0x88, 0xb0, 0xf3, 0x81, 0x81, 0xd6, 0x31, 0x6c, 0x4b, 0x78, 0x66, 0x6f, 0x06, 0xac, 0x43, 0x78,
	0xae, 0x40, 0x67, 0xbc, 0x1c, 0xad, 0x8e, 0xe0, 0xbc, 0x06, 0xfb, 0xf2, 0xe6, 0xb4, 0x3a, 0x80,
	0xbd, 0x45, 0x80, 0xfb, 0x67, 0x00, 0xee, 0x2f, 0x00, 0xdc, 0x3b, 0x07, 0xe0, 0xbc, 0x06, 0xfb,
	0xef, 0x6b, 0xae, 0x85, 0x45, 0xd8, 0x14, 0xb0, 0xb3, 0xe7, 0x91, 0x2f, 0x92, 0xd4, 0xe1, 0xeb,
	0x4a, 0x48, 0x08, 0x46, 0x08, 0x30, 0x36, 0xff, 0x8d, 0xbc, 0xb9, 0x00, 0xcf, 0xfc, 0x13, 0x7f,
	0x2d, 0x0e, 0xa5, 0x1a, 0xc3, 0xcb, 0x32, 0xb0, 0xe6, 0x25, 0x7c, 0x5b, 0x76, 0x7d, 0x70, 0x5c,
	0xb7, 0x6f, 0x6b, 0x2e, 0xc1, 0x0a, 0x66, 0x0f, 0x30, 0xcf, 0xcc, 0x0a, 0x33, 0x01, 0xde, 0xe5,
	0x8f, 0x51, 0x20, 0x24, 0x4c, 0x1a, 0x4e, 0x67, 0x35, 0x1c, 0x11, 0xbb, 0x93, 0x31, 0x52, 0xba,
	0xe4, 0xc1, 0x10, 0x56, 0xdb, 0x93, 0xe3, 0xb1, 0x48, 0x34, 0x36, 0xe0, 0x26, 0x36, 0x20, 0x2f,
	0xc1, 0x77, 0xd5, 0x7e, 0xdf, 0xdb, 0xb3, 0x38, 0xe2, 0x18, 0xfa, 0xf6, 0x9d, 0x98, 0xf6, 0xa3,
	0x30, 0xe1, 0x3a, 0x53, 0xc2, 0x81, 0x98, 0xd7, 0xc0, 0x63, 0x6f, 0x63, 0x02, 0xd2, 0xc0, 0x80,
	0x2c, 0x68, 0x90, 0x22, 0xb7, 0x31, 0x63, 0x6a, 0x9a, 0x14, 0x2d, 0x88, 0xe0, 0x82, 0x7f, 0xb1,
	0x23, 0xf7, 0xd9, 0xc3, 0x5a, 0xc6, 0xb5, 0x20, 0xd2, 0x87, 0x64, 0xdd, 0x7e, 0x6c, 0xcc, 0x3e,
	0x52, 0xd8, 0x6d, 0x34, 0x9e, 0xd1, 0xe9, 0x3d, 0xb2, 0xfa, 0x83, 0x8a, 0xc2, 0x28, 0xe1, 0xf1,
	0x53, 0xa9, 0xc6, 0x5c, 0xb3, 0x6d, 0xdc, 0xc1, 0x29, 0x95, 0x7e, 0x4a, 0xae, 0x38, 0x65, 0x4f,
	0x26, 0x5a, 0x24, 0xba, 0x1f, 0xbd, 0x11, 0xec, 0x0e, 0xde, 0xf6, 0xbc, 0x29, 0x78, 0x37, 0x3b,
	0x69, 0x2a, 0x34, 0x7c, 0xcc, 0xb0, 0xbb, 0xf8, 0x79, 0x33, 0x17, 0xa0, 0xdb, 0x96, 0x4b, 0x9c,
	0xbf, 0x87, 0xf3, 0x79, 0x09, 0xba, 0x06, 0x07, 0xa5, 0xfb, 0x6c, 0x62, 0xf7, 0x4d, 0x22, 0xf3,
	0x9a, 0x3b, 0xe8, 0xdb, 0xe7, 0x1c, 0xf4, 0x0f, 0x3e, 0xfe, 0xa0, 0x7f, 0xf8, 0x6f, 0x07, 0xfd,
	0x27, 0x17, 0x1d, 0xf4, 0x8f, 0x3e, 0xf6, 0xa0, 0x7f, 0x7c, 0xf1, 0x41, 0xdf, 0xf9, 0xe0, 0x41,
	0xdf, 0x3d, 0x7b, 0xd0, 0xef, 0x7e, 0xf5, 0xc7, 0x49, 0xa3, 0xf0, 0xf6, 0xa4, 0x51, 0xf8, 0xfb,
	0xa4, 0x51, 0xf8, 0xed, 0x7d, 0xe3, 0xd2, 0xdb, 0xf7, 0x8d, 0x4b, 0x7f, 0xbd, 0x6f, 0x5c, 0xfa,
	0xa5, 0x99, 0xc5, 0x5a, 0x89, 0xce, 0x58, 0x74, 0xed, 0xd3, 0x75, 0x17, 0x7f, 0x3e, 0x8d, 0x8a,
	0xf8, 0x9b, 0xe6, 0xf3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x35, 0x86, 0xaa, 0x9c, 0x57, 0x0d,
	0x00, 0x00,
}
