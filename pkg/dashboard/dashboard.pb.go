// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dashboard.proto

package dashboard

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entry_Kind int32

const (
	Entry_Undefined Entry_Kind = 0
	Entry_Hack      Entry_Kind = 1
	Entry_Track     Entry_Kind = 2
	Entry_Merch     Entry_Kind = 3
)

var Entry_Kind_name = map[int32]string{
	0: "Undefined",
	1: "Hack",
	2: "Track",
	3: "Merch",
}

var Entry_Kind_value = map[string]int32{
	"Undefined": 0,
	"Hack":      1,
	"Track":     2,
	"Merch":     3,
}

func (x Entry_Kind) String() string {
	return proto.EnumName(Entry_Kind_name, int32(x))
}

func (Entry_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b97678da3a35dfb, []int{1, 0}
}

type Entries struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *Entries) Reset()         { *m = Entries{} }
func (m *Entries) String() string { return proto.CompactTextString(m) }
func (*Entries) ProtoMessage()    {}
func (*Entries) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b97678da3a35dfb, []int{0}
}
func (m *Entries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entries.Merge(m, src)
}
func (m *Entries) XXX_Size() int {
	return m.Size()
}
func (m *Entries) XXX_DiscardUnknown() {
	xxx_messageInfo_Entries.DiscardUnknown(m)
}

var xxx_messageInfo_Entries proto.InternalMessageInfo

func (m *Entries) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Entry struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	URL         string     `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ImageURL    string     `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	IsExternal  bool       `protobuf:"varint,5,opt,name=is_external,json=isExternal,proto3" json:"is_external,omitempty"`
	Kind        Entry_Kind `protobuf:"varint,6,opt,name=kind,proto3,enum=calcbiz.dashboard.Entry_Kind" json:"kind,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b97678da3a35dfb, []int{1}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Entry) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Entry) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entry) GetImageURL() string {
	if m != nil {
		return m.ImageURL
	}
	return ""
}

func (m *Entry) GetIsExternal() bool {
	if m != nil {
		return m.IsExternal
	}
	return false
}

func (m *Entry) GetKind() Entry_Kind {
	if m != nil {
		return m.Kind
	}
	return Entry_Undefined
}

func init() {
	proto.RegisterEnum("calcbiz.dashboard.Entry_Kind", Entry_Kind_name, Entry_Kind_value)
	proto.RegisterType((*Entries)(nil), "calcbiz.dashboard.Entries")
	proto.RegisterType((*Entry)(nil), "calcbiz.dashboard.Entry")
}

func init() { proto.RegisterFile("dashboard.proto", fileDescriptor_9b97678da3a35dfb) }

var fileDescriptor_9b97678da3a35dfb = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3d, 0x8b, 0xdb, 0x30,
	0x1c, 0xc6, 0xad, 0xd8, 0x4e, 0x6c, 0xa5, 0x2f, 0xa9, 0xe8, 0xe0, 0x86, 0xd6, 0x31, 0x99, 0xdc,
	0xa1, 0x36, 0x4d, 0x29, 0x74, 0xe9, 0x12, 0x08, 0xb4, 0xb4, 0x5d, 0x4c, 0xb3, 0x74, 0x09, 0xb2,
	0xad, 0x38, 0x22, 0x8e, 0x64, 0x64, 0x19, 0x7a, 0xf7, 0x29, 0xf2, 0xb1, 0x6e, 0xcc, 0x78, 0x53,
	0x38, 0x9c, 0x2f, 0x72, 0x48, 0xce, 0x85, 0x83, 0xe3, 0xb6, 0xe7, 0xf9, 0xfd, 0x9f, 0xff, 0x8b,
	0x10, 0x7c, 0x9d, 0xe3, 0x7a, 0x93, 0x72, 0x2c, 0xf2, 0xa8, 0x12, 0x5c, 0x72, 0xf4, 0x26, 0xc3,
	0x65, 0x96, 0xd2, 0xeb, 0xe8, 0x52, 0x18, 0xbf, 0x2f, 0x38, 0x2f, 0x4a, 0x12, 0xe3, 0x8a, 0xc6,
	0x98, 0x31, 0x2e, 0xb1, 0xa4, 0x9c, 0xd5, 0x5d, 0xc3, 0xf8, 0x53, 0x41, 0xe5, 0xa6, 0x49, 0xa3,
	0x8c, 0xef, 0xe2, 0x82, 0x17, 0x3c, 0xd6, 0x38, 0x6d, 0xd6, 0xda, 0x69, 0xa3, 0x55, 0x17, 0x9f,
	0x7e, 0x87, 0x83, 0x05, 0x93, 0x82, 0x92, 0x1a, 0xcd, 0xe0, 0x80, 0x74, 0xd2, 0x03, 0x81, 0x19,
	0x0e, 0x67, 0x5e, 0xf4, 0x64, 0x79, 0xa4, 0xc2, 0x57, 0xc9, 0x43, 0x70, 0xba, 0xef, 0x41, 0x5b,
	0x23, 0xf4, 0x16, 0xda, 0x92, 0xca, 0x92, 0x78, 0x20, 0x00, 0xa1, 0x9b, 0x74, 0x06, 0xbd, 0x83,
	0x66, 0x23, 0x4a, 0xaf, 0xa7, 0xd8, 0x7c, 0xd0, 0x1e, 0x27, 0xe6, 0x32, 0xf9, 0x9d, 0x28, 0x86,
	0x02, 0x38, 0xcc, 0x49, 0x9d, 0x09, 0x5a, 0xa9, 0xf3, 0x3d, 0x53, 0xb7, 0x3d, 0x46, 0xe8, 0x23,
	0x74, 0xe9, 0x0e, 0x17, 0x64, 0xa5, 0x46, 0x58, 0x7a, 0xc4, 0x8b, 0xf6, 0x38, 0x71, 0x7e, 0x2a,
	0xa8, 0xe6, 0x38, 0xba, 0xbc, 0x14, 0x25, 0x9a, 0xc0, 0x21, 0xad, 0x57, 0xe4, 0xbf, 0x24, 0x82,
	0xe1, 0xd2, 0xb3, 0x03, 0x10, 0x3a, 0x09, 0xa4, 0xf5, 0xe2, 0x4c, 0xd0, 0x67, 0x68, 0x6d, 0x29,
	0xcb, 0xbd, 0x7e, 0x00, 0xc2, 0x57, 0xb3, 0x0f, 0xcf, 0xbd, 0x2c, 0xfa, 0x45, 0x59, 0x9e, 0xe8,
	0xe8, 0xf4, 0x2b, 0xb4, 0x94, 0x43, 0x2f, 0xa1, 0xbb, 0x64, 0x39, 0x59, 0x53, 0x46, 0xf2, 0x91,
	0x81, 0x1c, 0x68, 0xfd, 0xc0, 0xd9, 0x76, 0x04, 0x90, 0x0b, 0xed, 0xbf, 0x42, 0xc9, 0x9e, 0x92,
	0x7f, 0x88, 0xc8, 0x36, 0x23, 0x73, 0xfe, 0xed, 0xa6, 0xf5, 0xc1, 0xa1, 0xf5, 0xc1, 0x5d, 0xeb,
	0x83, 0xfd, 0xc9, 0x37, 0x0e, 0x27, 0xdf, 0xb8, 0x3d, 0xf9, 0xc6, 0x3f, 0xbf, 0x29, 0xa5, 0x20,
	0xd1, 0x8e, 0xc4, 0xe7, 0xed, 0x71, 0xb5, 0x2d, 0xe2, 0xcb, 0x05, 0x69, 0x5f, 0x7f, 0xc9, 0x97,
	0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xed, 0xe1, 0xf1, 0x05, 0x02, 0x00, 0x00,
}

func (m *Entries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDashboard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintDashboard(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x30
	}
	if m.IsExternal {
		i--
		if m.IsExternal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ImageURL) > 0 {
		i -= len(m.ImageURL)
		copy(dAtA[i:], m.ImageURL)
		i = encodeVarintDashboard(dAtA, i, uint64(len(m.ImageURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDashboard(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintDashboard(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDashboard(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDashboard(dAtA []byte, offset int, v uint64) int {
	offset -= sovDashboard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDashboard(uint64(l))
		}
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ImageURL)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.IsExternal {
		n += 2
	}
	if m.Kind != 0 {
		n += 1 + sovDashboard(uint64(m.Kind))
	}
	return n
}

func sovDashboard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDashboard(x uint64) (n int) {
	return sovDashboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDashboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDashboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDashboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDashboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDashboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExternal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExternal = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Entry_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDashboard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDashboard
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDashboard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDashboard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDashboard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDashboard
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDashboard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDashboard   = fmt.Errorf("proto: integer overflow")
)
