// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	crew "ultre.me/calcbiz/pkg/crew"
	dashboard "ultre.me/calcbiz/pkg/dashboard"
	soundcloud "ultre.me/calcbiz/pkg/soundcloud"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Dashboard struct {
}

func (m *Dashboard) Reset()         { *m = Dashboard{} }
func (m *Dashboard) String() string { return proto.CompactTextString(m) }
func (*Dashboard) ProtoMessage()    {}
func (*Dashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *Dashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dashboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dashboard.Merge(m, src)
}
func (m *Dashboard) XXX_Size() int {
	return m.Size()
}
func (m *Dashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Dashboard.DiscardUnknown(m)
}

var xxx_messageInfo_Dashboard proto.InternalMessageInfo

type Dashboard_Input struct {
}

func (m *Dashboard_Input) Reset()         { *m = Dashboard_Input{} }
func (m *Dashboard_Input) String() string { return proto.CompactTextString(m) }
func (*Dashboard_Input) ProtoMessage()    {}
func (*Dashboard_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 0}
}
func (m *Dashboard_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dashboard_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dashboard_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dashboard_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dashboard_Input.Merge(m, src)
}
func (m *Dashboard_Input) XXX_Size() int {
	return m.Size()
}
func (m *Dashboard_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Dashboard_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Dashboard_Input proto.InternalMessageInfo

type Dashboard_Output struct {
	Entries *dashboard.Entries `protobuf:"bytes,1,opt,name=entries,proto3" json:"entries,omitempty"`
}

func (m *Dashboard_Output) Reset()         { *m = Dashboard_Output{} }
func (m *Dashboard_Output) String() string { return proto.CompactTextString(m) }
func (*Dashboard_Output) ProtoMessage()    {}
func (*Dashboard_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0, 1}
}
func (m *Dashboard_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dashboard_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dashboard_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dashboard_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dashboard_Output.Merge(m, src)
}
func (m *Dashboard_Output) XXX_Size() int {
	return m.Size()
}
func (m *Dashboard_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Dashboard_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Dashboard_Output proto.InternalMessageInfo

func (m *Dashboard_Output) GetEntries() *dashboard.Entries {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Hackz struct {
}

func (m *Hackz) Reset()         { *m = Hackz{} }
func (m *Hackz) String() string { return proto.CompactTextString(m) }
func (*Hackz) ProtoMessage()    {}
func (*Hackz) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *Hackz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hackz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hackz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hackz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hackz.Merge(m, src)
}
func (m *Hackz) XXX_Size() int {
	return m.Size()
}
func (m *Hackz) XXX_DiscardUnknown() {
	xxx_messageInfo_Hackz.DiscardUnknown(m)
}

var xxx_messageInfo_Hackz proto.InternalMessageInfo

type Hackz_Input struct {
}

func (m *Hackz_Input) Reset()         { *m = Hackz_Input{} }
func (m *Hackz_Input) String() string { return proto.CompactTextString(m) }
func (*Hackz_Input) ProtoMessage()    {}
func (*Hackz_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 0}
}
func (m *Hackz_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hackz_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hackz_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hackz_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hackz_Input.Merge(m, src)
}
func (m *Hackz_Input) XXX_Size() int {
	return m.Size()
}
func (m *Hackz_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Hackz_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Hackz_Input proto.InternalMessageInfo

type Hackz_Output struct {
	Entries *dashboard.Entries `protobuf:"bytes,1,opt,name=entries,proto3" json:"entries,omitempty"`
}

func (m *Hackz_Output) Reset()         { *m = Hackz_Output{} }
func (m *Hackz_Output) String() string { return proto.CompactTextString(m) }
func (*Hackz_Output) ProtoMessage()    {}
func (*Hackz_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1, 1}
}
func (m *Hackz_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hackz_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hackz_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hackz_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hackz_Output.Merge(m, src)
}
func (m *Hackz_Output) XXX_Size() int {
	return m.Size()
}
func (m *Hackz_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Hackz_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Hackz_Output proto.InternalMessageInfo

func (m *Hackz_Output) GetEntries() *dashboard.Entries {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Crew struct {
}

func (m *Crew) Reset()         { *m = Crew{} }
func (m *Crew) String() string { return proto.CompactTextString(m) }
func (*Crew) ProtoMessage()    {}
func (*Crew) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *Crew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crew.Merge(m, src)
}
func (m *Crew) XXX_Size() int {
	return m.Size()
}
func (m *Crew) XXX_DiscardUnknown() {
	xxx_messageInfo_Crew.DiscardUnknown(m)
}

var xxx_messageInfo_Crew proto.InternalMessageInfo

type Crew_Input struct {
}

func (m *Crew_Input) Reset()         { *m = Crew_Input{} }
func (m *Crew_Input) String() string { return proto.CompactTextString(m) }
func (*Crew_Input) ProtoMessage()    {}
func (*Crew_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2, 0}
}
func (m *Crew_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crew_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crew_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crew_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crew_Input.Merge(m, src)
}
func (m *Crew_Input) XXX_Size() int {
	return m.Size()
}
func (m *Crew_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Crew_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Crew_Input proto.InternalMessageInfo

type Crew_Output struct {
	Crew *crew.Crew `protobuf:"bytes,1,opt,name=crew,proto3" json:"crew,omitempty"`
}

func (m *Crew_Output) Reset()         { *m = Crew_Output{} }
func (m *Crew_Output) String() string { return proto.CompactTextString(m) }
func (*Crew_Output) ProtoMessage()    {}
func (*Crew_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2, 1}
}
func (m *Crew_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crew_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crew_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crew_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crew_Output.Merge(m, src)
}
func (m *Crew_Output) XXX_Size() int {
	return m.Size()
}
func (m *Crew_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Crew_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Crew_Output proto.InternalMessageInfo

func (m *Crew_Output) GetCrew() *crew.Crew {
	if m != nil {
		return m.Crew
	}
	return nil
}

type SoundcloudMe struct {
}

func (m *SoundcloudMe) Reset()         { *m = SoundcloudMe{} }
func (m *SoundcloudMe) String() string { return proto.CompactTextString(m) }
func (*SoundcloudMe) ProtoMessage()    {}
func (*SoundcloudMe) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *SoundcloudMe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudMe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudMe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudMe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudMe.Merge(m, src)
}
func (m *SoundcloudMe) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudMe) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudMe.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudMe proto.InternalMessageInfo

type SoundcloudMe_Input struct {
}

func (m *SoundcloudMe_Input) Reset()         { *m = SoundcloudMe_Input{} }
func (m *SoundcloudMe_Input) String() string { return proto.CompactTextString(m) }
func (*SoundcloudMe_Input) ProtoMessage()    {}
func (*SoundcloudMe_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 0}
}
func (m *SoundcloudMe_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudMe_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudMe_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudMe_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudMe_Input.Merge(m, src)
}
func (m *SoundcloudMe_Input) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudMe_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudMe_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudMe_Input proto.InternalMessageInfo

type SoundcloudMe_Output struct {
	Me *soundcloud.User `protobuf:"bytes,1,opt,name=me,proto3" json:"me,omitempty"`
}

func (m *SoundcloudMe_Output) Reset()         { *m = SoundcloudMe_Output{} }
func (m *SoundcloudMe_Output) String() string { return proto.CompactTextString(m) }
func (*SoundcloudMe_Output) ProtoMessage()    {}
func (*SoundcloudMe_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 1}
}
func (m *SoundcloudMe_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudMe_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudMe_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudMe_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudMe_Output.Merge(m, src)
}
func (m *SoundcloudMe_Output) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudMe_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudMe_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudMe_Output proto.InternalMessageInfo

func (m *SoundcloudMe_Output) GetMe() *soundcloud.User {
	if m != nil {
		return m.Me
	}
	return nil
}

type SoundcloudPlaylists struct {
}

func (m *SoundcloudPlaylists) Reset()         { *m = SoundcloudPlaylists{} }
func (m *SoundcloudPlaylists) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylists) ProtoMessage()    {}
func (*SoundcloudPlaylists) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *SoundcloudPlaylists) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylists) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylists.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylists) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylists.Merge(m, src)
}
func (m *SoundcloudPlaylists) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylists) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylists.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylists proto.InternalMessageInfo

type SoundcloudPlaylists_Input struct {
}

func (m *SoundcloudPlaylists_Input) Reset()         { *m = SoundcloudPlaylists_Input{} }
func (m *SoundcloudPlaylists_Input) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylists_Input) ProtoMessage()    {}
func (*SoundcloudPlaylists_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4, 0}
}
func (m *SoundcloudPlaylists_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylists_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylists_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylists_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylists_Input.Merge(m, src)
}
func (m *SoundcloudPlaylists_Input) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylists_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylists_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylists_Input proto.InternalMessageInfo

type SoundcloudPlaylists_Output struct {
	Playlists *soundcloud.Playlists `protobuf:"bytes,1,opt,name=playlists,proto3" json:"playlists,omitempty"`
}

func (m *SoundcloudPlaylists_Output) Reset()         { *m = SoundcloudPlaylists_Output{} }
func (m *SoundcloudPlaylists_Output) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylists_Output) ProtoMessage()    {}
func (*SoundcloudPlaylists_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4, 1}
}
func (m *SoundcloudPlaylists_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylists_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylists_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylists_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylists_Output.Merge(m, src)
}
func (m *SoundcloudPlaylists_Output) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylists_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylists_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylists_Output proto.InternalMessageInfo

func (m *SoundcloudPlaylists_Output) GetPlaylists() *soundcloud.Playlists {
	if m != nil {
		return m.Playlists
	}
	return nil
}

type SoundcloudPlaylist struct {
}

func (m *SoundcloudPlaylist) Reset()         { *m = SoundcloudPlaylist{} }
func (m *SoundcloudPlaylist) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylist) ProtoMessage()    {}
func (*SoundcloudPlaylist) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *SoundcloudPlaylist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylist.Merge(m, src)
}
func (m *SoundcloudPlaylist) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylist) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylist.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylist proto.InternalMessageInfo

type SoundcloudPlaylist_Input struct {
	PlaylistId uint64 `protobuf:"varint,1,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (m *SoundcloudPlaylist_Input) Reset()         { *m = SoundcloudPlaylist_Input{} }
func (m *SoundcloudPlaylist_Input) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylist_Input) ProtoMessage()    {}
func (*SoundcloudPlaylist_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 0}
}
func (m *SoundcloudPlaylist_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylist_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylist_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylist_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylist_Input.Merge(m, src)
}
func (m *SoundcloudPlaylist_Input) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylist_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylist_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylist_Input proto.InternalMessageInfo

func (m *SoundcloudPlaylist_Input) GetPlaylistId() uint64 {
	if m != nil {
		return m.PlaylistId
	}
	return 0
}

type SoundcloudPlaylist_Output struct {
	Playlist *soundcloud.Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
}

func (m *SoundcloudPlaylist_Output) Reset()         { *m = SoundcloudPlaylist_Output{} }
func (m *SoundcloudPlaylist_Output) String() string { return proto.CompactTextString(m) }
func (*SoundcloudPlaylist_Output) ProtoMessage()    {}
func (*SoundcloudPlaylist_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 1}
}
func (m *SoundcloudPlaylist_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudPlaylist_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudPlaylist_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudPlaylist_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudPlaylist_Output.Merge(m, src)
}
func (m *SoundcloudPlaylist_Output) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudPlaylist_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudPlaylist_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudPlaylist_Output proto.InternalMessageInfo

func (m *SoundcloudPlaylist_Output) GetPlaylist() *soundcloud.Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

type SoundcloudTracks struct {
}

func (m *SoundcloudTracks) Reset()         { *m = SoundcloudTracks{} }
func (m *SoundcloudTracks) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTracks) ProtoMessage()    {}
func (*SoundcloudTracks) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *SoundcloudTracks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTracks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTracks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTracks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTracks.Merge(m, src)
}
func (m *SoundcloudTracks) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTracks) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTracks.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTracks proto.InternalMessageInfo

type SoundcloudTracks_Input struct {
}

func (m *SoundcloudTracks_Input) Reset()         { *m = SoundcloudTracks_Input{} }
func (m *SoundcloudTracks_Input) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTracks_Input) ProtoMessage()    {}
func (*SoundcloudTracks_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6, 0}
}
func (m *SoundcloudTracks_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTracks_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTracks_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTracks_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTracks_Input.Merge(m, src)
}
func (m *SoundcloudTracks_Input) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTracks_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTracks_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTracks_Input proto.InternalMessageInfo

type SoundcloudTracks_Output struct {
	Tracks *soundcloud.Tracks `protobuf:"bytes,1,opt,name=tracks,proto3" json:"tracks,omitempty"`
}

func (m *SoundcloudTracks_Output) Reset()         { *m = SoundcloudTracks_Output{} }
func (m *SoundcloudTracks_Output) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTracks_Output) ProtoMessage()    {}
func (*SoundcloudTracks_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6, 1}
}
func (m *SoundcloudTracks_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTracks_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTracks_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTracks_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTracks_Output.Merge(m, src)
}
func (m *SoundcloudTracks_Output) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTracks_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTracks_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTracks_Output proto.InternalMessageInfo

func (m *SoundcloudTracks_Output) GetTracks() *soundcloud.Tracks {
	if m != nil {
		return m.Tracks
	}
	return nil
}

type SoundcloudTrack struct {
}

func (m *SoundcloudTrack) Reset()         { *m = SoundcloudTrack{} }
func (m *SoundcloudTrack) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTrack) ProtoMessage()    {}
func (*SoundcloudTrack) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *SoundcloudTrack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTrack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTrack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTrack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTrack.Merge(m, src)
}
func (m *SoundcloudTrack) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTrack) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTrack.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTrack proto.InternalMessageInfo

type SoundcloudTrack_Input struct {
	TrackId uint64 `protobuf:"varint,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (m *SoundcloudTrack_Input) Reset()         { *m = SoundcloudTrack_Input{} }
func (m *SoundcloudTrack_Input) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTrack_Input) ProtoMessage()    {}
func (*SoundcloudTrack_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7, 0}
}
func (m *SoundcloudTrack_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTrack_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTrack_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTrack_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTrack_Input.Merge(m, src)
}
func (m *SoundcloudTrack_Input) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTrack_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTrack_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTrack_Input proto.InternalMessageInfo

func (m *SoundcloudTrack_Input) GetTrackId() uint64 {
	if m != nil {
		return m.TrackId
	}
	return 0
}

type SoundcloudTrack_Output struct {
	Track *soundcloud.Track `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (m *SoundcloudTrack_Output) Reset()         { *m = SoundcloudTrack_Output{} }
func (m *SoundcloudTrack_Output) String() string { return proto.CompactTextString(m) }
func (*SoundcloudTrack_Output) ProtoMessage()    {}
func (*SoundcloudTrack_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7, 1}
}
func (m *SoundcloudTrack_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SoundcloudTrack_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SoundcloudTrack_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SoundcloudTrack_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoundcloudTrack_Output.Merge(m, src)
}
func (m *SoundcloudTrack_Output) XXX_Size() int {
	return m.Size()
}
func (m *SoundcloudTrack_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SoundcloudTrack_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SoundcloudTrack_Output proto.InternalMessageInfo

func (m *SoundcloudTrack_Output) GetTrack() *soundcloud.Track {
	if m != nil {
		return m.Track
	}
	return nil
}

type Metrics struct {
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

type Metrics_Input struct {
}

func (m *Metrics_Input) Reset()         { *m = Metrics_Input{} }
func (m *Metrics_Input) String() string { return proto.CompactTextString(m) }
func (*Metrics_Input) ProtoMessage()    {}
func (*Metrics_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8, 0}
}
func (m *Metrics_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_Input.Merge(m, src)
}
func (m *Metrics_Input) XXX_Size() int {
	return m.Size()
}
func (m *Metrics_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_Input proto.InternalMessageInfo

type Metrics_Output struct {
	StaticBoxSize     int32  `protobuf:"varint,1,opt,name=static_box_size,json=staticBoxSize,proto3" json:"static_box_size,omitempty"`
	ServerStartTime   string `protobuf:"bytes,2,opt,name=server_start_time,json=serverStartTime,proto3" json:"server_start_time,omitempty"`
	ServerCurrentTime string `protobuf:"bytes,3,opt,name=server_current_time,json=serverCurrentTime,proto3" json:"server_current_time,omitempty"`
	ServerUptime      string `protobuf:"bytes,4,opt,name=server_uptime,json=serverUptime,proto3" json:"server_uptime,omitempty"`
}

func (m *Metrics_Output) Reset()         { *m = Metrics_Output{} }
func (m *Metrics_Output) String() string { return proto.CompactTextString(m) }
func (*Metrics_Output) ProtoMessage()    {}
func (*Metrics_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8, 1}
}
func (m *Metrics_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metrics_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metrics_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metrics_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics_Output.Merge(m, src)
}
func (m *Metrics_Output) XXX_Size() int {
	return m.Size()
}
func (m *Metrics_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics_Output proto.InternalMessageInfo

func (m *Metrics_Output) GetStaticBoxSize() int32 {
	if m != nil {
		return m.StaticBoxSize
	}
	return 0
}

func (m *Metrics_Output) GetServerStartTime() string {
	if m != nil {
		return m.ServerStartTime
	}
	return ""
}

func (m *Metrics_Output) GetServerCurrentTime() string {
	if m != nil {
		return m.ServerCurrentTime
	}
	return ""
}

func (m *Metrics_Output) GetServerUptime() string {
	if m != nil {
		return m.ServerUptime
	}
	return ""
}

type Ping struct {
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type Ping_Input struct {
}

func (m *Ping_Input) Reset()         { *m = Ping_Input{} }
func (m *Ping_Input) String() string { return proto.CompactTextString(m) }
func (*Ping_Input) ProtoMessage()    {}
func (*Ping_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9, 0}
}
func (m *Ping_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping_Input.Merge(m, src)
}
func (m *Ping_Input) XXX_Size() int {
	return m.Size()
}
func (m *Ping_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Ping_Input proto.InternalMessageInfo

type Ping_Output struct {
	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (m *Ping_Output) Reset()         { *m = Ping_Output{} }
func (m *Ping_Output) String() string { return proto.CompactTextString(m) }
func (*Ping_Output) ProtoMessage()    {}
func (*Ping_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9, 1}
}
func (m *Ping_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping_Output.Merge(m, src)
}
func (m *Ping_Output) XXX_Size() int {
	return m.Size()
}
func (m *Ping_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Ping_Output proto.InternalMessageInfo

func (m *Ping_Output) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

type Kryptos struct {
}

func (m *Kryptos) Reset()         { *m = Kryptos{} }
func (m *Kryptos) String() string { return proto.CompactTextString(m) }
func (*Kryptos) ProtoMessage()    {}
func (*Kryptos) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *Kryptos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kryptos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kryptos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kryptos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kryptos.Merge(m, src)
}
func (m *Kryptos) XXX_Size() int {
	return m.Size()
}
func (m *Kryptos) XXX_DiscardUnknown() {
	xxx_messageInfo_Kryptos.DiscardUnknown(m)
}

var xxx_messageInfo_Kryptos proto.InternalMessageInfo

type Kryptos_Input struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *Kryptos_Input) Reset()         { *m = Kryptos_Input{} }
func (m *Kryptos_Input) String() string { return proto.CompactTextString(m) }
func (*Kryptos_Input) ProtoMessage()    {}
func (*Kryptos_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10, 0}
}
func (m *Kryptos_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kryptos_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kryptos_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kryptos_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kryptos_Input.Merge(m, src)
}
func (m *Kryptos_Input) XXX_Size() int {
	return m.Size()
}
func (m *Kryptos_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Kryptos_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Kryptos_Input proto.InternalMessageInfo

func (m *Kryptos_Input) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type Kryptos_Output struct {
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *Kryptos_Output) Reset()         { *m = Kryptos_Output{} }
func (m *Kryptos_Output) String() string { return proto.CompactTextString(m) }
func (*Kryptos_Output) ProtoMessage()    {}
func (*Kryptos_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10, 1}
}
func (m *Kryptos_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kryptos_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kryptos_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kryptos_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kryptos_Output.Merge(m, src)
}
func (m *Kryptos_Output) XXX_Size() int {
	return m.Size()
}
func (m *Kryptos_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Kryptos_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Kryptos_Output proto.InternalMessageInfo

func (m *Kryptos_Output) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type TpyoEnocde struct {
}

func (m *TpyoEnocde) Reset()         { *m = TpyoEnocde{} }
func (m *TpyoEnocde) String() string { return proto.CompactTextString(m) }
func (*TpyoEnocde) ProtoMessage()    {}
func (*TpyoEnocde) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *TpyoEnocde) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpyoEnocde) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpyoEnocde.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpyoEnocde) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpyoEnocde.Merge(m, src)
}
func (m *TpyoEnocde) XXX_Size() int {
	return m.Size()
}
func (m *TpyoEnocde) XXX_DiscardUnknown() {
	xxx_messageInfo_TpyoEnocde.DiscardUnknown(m)
}

var xxx_messageInfo_TpyoEnocde proto.InternalMessageInfo

type TpyoEnocde_Ipunt struct {
	Form string `protobuf:"bytes,1,opt,name=form,proto3" json:"form,omitempty"`
}

func (m *TpyoEnocde_Ipunt) Reset()         { *m = TpyoEnocde_Ipunt{} }
func (m *TpyoEnocde_Ipunt) String() string { return proto.CompactTextString(m) }
func (*TpyoEnocde_Ipunt) ProtoMessage()    {}
func (*TpyoEnocde_Ipunt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11, 0}
}
func (m *TpyoEnocde_Ipunt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpyoEnocde_Ipunt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpyoEnocde_Ipunt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpyoEnocde_Ipunt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpyoEnocde_Ipunt.Merge(m, src)
}
func (m *TpyoEnocde_Ipunt) XXX_Size() int {
	return m.Size()
}
func (m *TpyoEnocde_Ipunt) XXX_DiscardUnknown() {
	xxx_messageInfo_TpyoEnocde_Ipunt.DiscardUnknown(m)
}

var xxx_messageInfo_TpyoEnocde_Ipunt proto.InternalMessageInfo

func (m *TpyoEnocde_Ipunt) GetForm() string {
	if m != nil {
		return m.Form
	}
	return ""
}

type TpyoEnocde_Ouptut struct {
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *TpyoEnocde_Ouptut) Reset()         { *m = TpyoEnocde_Ouptut{} }
func (m *TpyoEnocde_Ouptut) String() string { return proto.CompactTextString(m) }
func (*TpyoEnocde_Ouptut) ProtoMessage()    {}
func (*TpyoEnocde_Ouptut) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11, 1}
}
func (m *TpyoEnocde_Ouptut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpyoEnocde_Ouptut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpyoEnocde_Ouptut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpyoEnocde_Ouptut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpyoEnocde_Ouptut.Merge(m, src)
}
func (m *TpyoEnocde_Ouptut) XXX_Size() int {
	return m.Size()
}
func (m *TpyoEnocde_Ouptut) XXX_DiscardUnknown() {
	xxx_messageInfo_TpyoEnocde_Ouptut.DiscardUnknown(m)
}

var xxx_messageInfo_TpyoEnocde_Ouptut proto.InternalMessageInfo

func (m *TpyoEnocde_Ouptut) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type Numberinfo struct {
}

func (m *Numberinfo) Reset()         { *m = Numberinfo{} }
func (m *Numberinfo) String() string { return proto.CompactTextString(m) }
func (*Numberinfo) ProtoMessage()    {}
func (*Numberinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *Numberinfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Numberinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Numberinfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Numberinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Numberinfo.Merge(m, src)
}
func (m *Numberinfo) XXX_Size() int {
	return m.Size()
}
func (m *Numberinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Numberinfo.DiscardUnknown(m)
}

var xxx_messageInfo_Numberinfo proto.InternalMessageInfo

type Numberinfo_Input struct {
	Number float32 `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Numberinfo_Input) Reset()         { *m = Numberinfo_Input{} }
func (m *Numberinfo_Input) String() string { return proto.CompactTextString(m) }
func (*Numberinfo_Input) ProtoMessage()    {}
func (*Numberinfo_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12, 0}
}
func (m *Numberinfo_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Numberinfo_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Numberinfo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Numberinfo_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Numberinfo_Input.Merge(m, src)
}
func (m *Numberinfo_Input) XXX_Size() int {
	return m.Size()
}
func (m *Numberinfo_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Numberinfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Numberinfo_Input proto.InternalMessageInfo

func (m *Numberinfo_Input) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Numberinfo_Output struct {
	Facts map[string]string `protobuf:"bytes,1,rep,name=facts,proto3" json:"facts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Numberinfo_Output) Reset()         { *m = Numberinfo_Output{} }
func (m *Numberinfo_Output) String() string { return proto.CompactTextString(m) }
func (*Numberinfo_Output) ProtoMessage()    {}
func (*Numberinfo_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12, 1}
}
func (m *Numberinfo_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Numberinfo_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Numberinfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Numberinfo_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Numberinfo_Output.Merge(m, src)
}
func (m *Numberinfo_Output) XXX_Size() int {
	return m.Size()
}
func (m *Numberinfo_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Numberinfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Numberinfo_Output proto.InternalMessageInfo

func (m *Numberinfo_Output) GetFacts() map[string]string {
	if m != nil {
		return m.Facts
	}
	return nil
}

type Moijaime struct {
}

func (m *Moijaime) Reset()         { *m = Moijaime{} }
func (m *Moijaime) String() string { return proto.CompactTextString(m) }
func (*Moijaime) ProtoMessage()    {}
func (*Moijaime) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *Moijaime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Moijaime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Moijaime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Moijaime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Moijaime.Merge(m, src)
}
func (m *Moijaime) XXX_Size() int {
	return m.Size()
}
func (m *Moijaime) XXX_DiscardUnknown() {
	xxx_messageInfo_Moijaime.DiscardUnknown(m)
}

var xxx_messageInfo_Moijaime proto.InternalMessageInfo

type Moijaime_Input struct {
}

func (m *Moijaime_Input) Reset()         { *m = Moijaime_Input{} }
func (m *Moijaime_Input) String() string { return proto.CompactTextString(m) }
func (*Moijaime_Input) ProtoMessage()    {}
func (*Moijaime_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13, 0}
}
func (m *Moijaime_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Moijaime_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Moijaime_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Moijaime_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Moijaime_Input.Merge(m, src)
}
func (m *Moijaime_Input) XXX_Size() int {
	return m.Size()
}
func (m *Moijaime_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Moijaime_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Moijaime_Input proto.InternalMessageInfo

type Moijaime_Output struct {
	Kiffs []string `protobuf:"bytes,1,rep,name=kiffs,proto3" json:"kiffs,omitempty"`
}

func (m *Moijaime_Output) Reset()         { *m = Moijaime_Output{} }
func (m *Moijaime_Output) String() string { return proto.CompactTextString(m) }
func (*Moijaime_Output) ProtoMessage()    {}
func (*Moijaime_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13, 1}
}
func (m *Moijaime_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Moijaime_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Moijaime_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Moijaime_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Moijaime_Output.Merge(m, src)
}
func (m *Moijaime_Output) XXX_Size() int {
	return m.Size()
}
func (m *Moijaime_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Moijaime_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Moijaime_Output proto.InternalMessageInfo

func (m *Moijaime_Output) GetKiffs() []string {
	if m != nil {
		return m.Kiffs
	}
	return nil
}

type Wotd struct {
}

func (m *Wotd) Reset()         { *m = Wotd{} }
func (m *Wotd) String() string { return proto.CompactTextString(m) }
func (*Wotd) ProtoMessage()    {}
func (*Wotd) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *Wotd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wotd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wotd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wotd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wotd.Merge(m, src)
}
func (m *Wotd) XXX_Size() int {
	return m.Size()
}
func (m *Wotd) XXX_DiscardUnknown() {
	xxx_messageInfo_Wotd.DiscardUnknown(m)
}

var xxx_messageInfo_Wotd proto.InternalMessageInfo

type Wotd_Input struct {
}

func (m *Wotd_Input) Reset()         { *m = Wotd_Input{} }
func (m *Wotd_Input) String() string { return proto.CompactTextString(m) }
func (*Wotd_Input) ProtoMessage()    {}
func (*Wotd_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14, 0}
}
func (m *Wotd_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wotd_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wotd_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wotd_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wotd_Input.Merge(m, src)
}
func (m *Wotd_Input) XXX_Size() int {
	return m.Size()
}
func (m *Wotd_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Wotd_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Wotd_Input proto.InternalMessageInfo

type Wotd_Output struct {
	Word string `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
}

func (m *Wotd_Output) Reset()         { *m = Wotd_Output{} }
func (m *Wotd_Output) String() string { return proto.CompactTextString(m) }
func (*Wotd_Output) ProtoMessage()    {}
func (*Wotd_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14, 1}
}
func (m *Wotd_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wotd_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wotd_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wotd_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wotd_Output.Merge(m, src)
}
func (m *Wotd_Output) XXX_Size() int {
	return m.Size()
}
func (m *Wotd_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Wotd_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Wotd_Output proto.InternalMessageInfo

func (m *Wotd_Output) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type AlternateLogo struct {
}

func (m *AlternateLogo) Reset()         { *m = AlternateLogo{} }
func (m *AlternateLogo) String() string { return proto.CompactTextString(m) }
func (*AlternateLogo) ProtoMessage()    {}
func (*AlternateLogo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *AlternateLogo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlternateLogo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlternateLogo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlternateLogo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlternateLogo.Merge(m, src)
}
func (m *AlternateLogo) XXX_Size() int {
	return m.Size()
}
func (m *AlternateLogo) XXX_DiscardUnknown() {
	xxx_messageInfo_AlternateLogo.DiscardUnknown(m)
}

var xxx_messageInfo_AlternateLogo proto.InternalMessageInfo

type AlternateLogo_Input struct {
}

func (m *AlternateLogo_Input) Reset()         { *m = AlternateLogo_Input{} }
func (m *AlternateLogo_Input) String() string { return proto.CompactTextString(m) }
func (*AlternateLogo_Input) ProtoMessage()    {}
func (*AlternateLogo_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15, 0}
}
func (m *AlternateLogo_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlternateLogo_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlternateLogo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlternateLogo_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlternateLogo_Input.Merge(m, src)
}
func (m *AlternateLogo_Input) XXX_Size() int {
	return m.Size()
}
func (m *AlternateLogo_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_AlternateLogo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_AlternateLogo_Input proto.InternalMessageInfo

type AlternateLogo_Output struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *AlternateLogo_Output) Reset()         { *m = AlternateLogo_Output{} }
func (m *AlternateLogo_Output) String() string { return proto.CompactTextString(m) }
func (*AlternateLogo_Output) ProtoMessage()    {}
func (*AlternateLogo_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15, 1}
}
func (m *AlternateLogo_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlternateLogo_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlternateLogo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlternateLogo_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlternateLogo_Output.Merge(m, src)
}
func (m *AlternateLogo_Output) XXX_Size() int {
	return m.Size()
}
func (m *AlternateLogo_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_AlternateLogo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_AlternateLogo_Output proto.InternalMessageInfo

func (m *AlternateLogo_Output) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SpreadshirtRandom struct {
}

func (m *SpreadshirtRandom) Reset()         { *m = SpreadshirtRandom{} }
func (m *SpreadshirtRandom) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtRandom) ProtoMessage()    {}
func (*SpreadshirtRandom) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *SpreadshirtRandom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtRandom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtRandom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtRandom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtRandom.Merge(m, src)
}
func (m *SpreadshirtRandom) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtRandom) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtRandom.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtRandom proto.InternalMessageInfo

type SpreadshirtRandom_Input struct {
}

func (m *SpreadshirtRandom_Input) Reset()         { *m = SpreadshirtRandom_Input{} }
func (m *SpreadshirtRandom_Input) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtRandom_Input) ProtoMessage()    {}
func (*SpreadshirtRandom_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16, 0}
}
func (m *SpreadshirtRandom_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtRandom_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtRandom_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtRandom_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtRandom_Input.Merge(m, src)
}
func (m *SpreadshirtRandom_Input) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtRandom_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtRandom_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtRandom_Input proto.InternalMessageInfo

type SpreadshirtRandom_Output struct {
}

func (m *SpreadshirtRandom_Output) Reset()         { *m = SpreadshirtRandom_Output{} }
func (m *SpreadshirtRandom_Output) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtRandom_Output) ProtoMessage()    {}
func (*SpreadshirtRandom_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16, 1}
}
func (m *SpreadshirtRandom_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtRandom_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtRandom_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtRandom_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtRandom_Output.Merge(m, src)
}
func (m *SpreadshirtRandom_Output) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtRandom_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtRandom_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtRandom_Output proto.InternalMessageInfo

type SpreadshirtAll struct {
}

func (m *SpreadshirtAll) Reset()         { *m = SpreadshirtAll{} }
func (m *SpreadshirtAll) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtAll) ProtoMessage()    {}
func (*SpreadshirtAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *SpreadshirtAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtAll.Merge(m, src)
}
func (m *SpreadshirtAll) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtAll) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtAll.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtAll proto.InternalMessageInfo

type SpreadshirtAll_Input struct {
}

func (m *SpreadshirtAll_Input) Reset()         { *m = SpreadshirtAll_Input{} }
func (m *SpreadshirtAll_Input) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtAll_Input) ProtoMessage()    {}
func (*SpreadshirtAll_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17, 0}
}
func (m *SpreadshirtAll_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtAll_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtAll_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtAll_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtAll_Input.Merge(m, src)
}
func (m *SpreadshirtAll_Input) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtAll_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtAll_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtAll_Input proto.InternalMessageInfo

type SpreadshirtAll_Output struct {
}

func (m *SpreadshirtAll_Output) Reset()         { *m = SpreadshirtAll_Output{} }
func (m *SpreadshirtAll_Output) String() string { return proto.CompactTextString(m) }
func (*SpreadshirtAll_Output) ProtoMessage()    {}
func (*SpreadshirtAll_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17, 1}
}
func (m *SpreadshirtAll_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpreadshirtAll_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpreadshirtAll_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpreadshirtAll_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpreadshirtAll_Output.Merge(m, src)
}
func (m *SpreadshirtAll_Output) XXX_Size() int {
	return m.Size()
}
func (m *SpreadshirtAll_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SpreadshirtAll_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SpreadshirtAll_Output proto.InternalMessageInfo

type Recettator struct {
}

func (m *Recettator) Reset()         { *m = Recettator{} }
func (m *Recettator) String() string { return proto.CompactTextString(m) }
func (*Recettator) ProtoMessage()    {}
func (*Recettator) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *Recettator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recettator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recettator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recettator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recettator.Merge(m, src)
}
func (m *Recettator) XXX_Size() int {
	return m.Size()
}
func (m *Recettator) XXX_DiscardUnknown() {
	xxx_messageInfo_Recettator.DiscardUnknown(m)
}

var xxx_messageInfo_Recettator proto.InternalMessageInfo

type Recettator_Input struct {
	Seed                 int64  `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	MainIngredients      uint64 `protobuf:"varint,2,opt,name=main_ingredients,json=mainIngredients,proto3" json:"main_ingredients,omitempty"`
	SecondaryIngredients uint64 `protobuf:"varint,3,opt,name=secondary_ingredients,json=secondaryIngredients,proto3" json:"secondary_ingredients,omitempty"`
	Steps                uint64 `protobuf:"varint,4,opt,name=steps,proto3" json:"steps,omitempty"`
}

func (m *Recettator_Input) Reset()         { *m = Recettator_Input{} }
func (m *Recettator_Input) String() string { return proto.CompactTextString(m) }
func (*Recettator_Input) ProtoMessage()    {}
func (*Recettator_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18, 0}
}
func (m *Recettator_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recettator_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recettator_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recettator_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recettator_Input.Merge(m, src)
}
func (m *Recettator_Input) XXX_Size() int {
	return m.Size()
}
func (m *Recettator_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Recettator_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Recettator_Input proto.InternalMessageInfo

func (m *Recettator_Input) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *Recettator_Input) GetMainIngredients() uint64 {
	if m != nil {
		return m.MainIngredients
	}
	return 0
}

func (m *Recettator_Input) GetSecondaryIngredients() uint64 {
	if m != nil {
		return m.SecondaryIngredients
	}
	return 0
}

func (m *Recettator_Input) GetSteps() uint64 {
	if m != nil {
		return m.Steps
	}
	return 0
}

type Recettator_Output struct {
	Title                string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	People               uint64                   `protobuf:"varint,2,opt,name=people,proto3" json:"people,omitempty"`
	Markdown             string                   `protobuf:"bytes,3,opt,name=markdown,proto3" json:"markdown,omitempty"`
	Steps                []string                 `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	MainIngredients      []*Recettator_Ingredient `protobuf:"bytes,5,rep,name=main_ingredients,json=mainIngredients,proto3" json:"main_ingredients,omitempty"`
	SecondaryIngredients []*Recettator_Ingredient `protobuf:"bytes,6,rep,name=secondary_ingredients,json=secondaryIngredients,proto3" json:"secondary_ingredients,omitempty"`
	Seed                 int64                    `protobuf:"varint,7,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *Recettator_Output) Reset()         { *m = Recettator_Output{} }
func (m *Recettator_Output) String() string { return proto.CompactTextString(m) }
func (*Recettator_Output) ProtoMessage()    {}
func (*Recettator_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18, 1}
}
func (m *Recettator_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recettator_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recettator_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recettator_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recettator_Output.Merge(m, src)
}
func (m *Recettator_Output) XXX_Size() int {
	return m.Size()
}
func (m *Recettator_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Recettator_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Recettator_Output proto.InternalMessageInfo

func (m *Recettator_Output) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Recettator_Output) GetPeople() uint64 {
	if m != nil {
		return m.People
	}
	return 0
}

func (m *Recettator_Output) GetMarkdown() string {
	if m != nil {
		return m.Markdown
	}
	return ""
}

func (m *Recettator_Output) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Recettator_Output) GetMainIngredients() []*Recettator_Ingredient {
	if m != nil {
		return m.MainIngredients
	}
	return nil
}

func (m *Recettator_Output) GetSecondaryIngredients() []*Recettator_Ingredient {
	if m != nil {
		return m.SecondaryIngredients
	}
	return nil
}

func (m *Recettator_Output) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

type Recettator_Ingredient struct {
	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Quantity        string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Method          string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Gender          string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Multiple        bool   `protobuf:"varint,5,opt,name=multiple,proto3" json:"multiple,omitempty"`
	Kind            string `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	NameAndQuantity string `protobuf:"bytes,7,opt,name=name_and_quantity,json=nameAndQuantity,proto3" json:"name_and_quantity,omitempty"`
}

func (m *Recettator_Ingredient) Reset()         { *m = Recettator_Ingredient{} }
func (m *Recettator_Ingredient) String() string { return proto.CompactTextString(m) }
func (*Recettator_Ingredient) ProtoMessage()    {}
func (*Recettator_Ingredient) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18, 2}
}
func (m *Recettator_Ingredient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recettator_Ingredient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recettator_Ingredient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recettator_Ingredient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recettator_Ingredient.Merge(m, src)
}
func (m *Recettator_Ingredient) XXX_Size() int {
	return m.Size()
}
func (m *Recettator_Ingredient) XXX_DiscardUnknown() {
	xxx_messageInfo_Recettator_Ingredient.DiscardUnknown(m)
}

var xxx_messageInfo_Recettator_Ingredient proto.InternalMessageInfo

func (m *Recettator_Ingredient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recettator_Ingredient) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

func (m *Recettator_Ingredient) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Recettator_Ingredient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Recettator_Ingredient) GetMultiple() bool {
	if m != nil {
		return m.Multiple
	}
	return false
}

func (m *Recettator_Ingredient) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Recettator_Ingredient) GetNameAndQuantity() string {
	if m != nil {
		return m.NameAndQuantity
	}
	return ""
}

func init() {
	proto.RegisterType((*Dashboard)(nil), "calcbiz.server.Dashboard")
	proto.RegisterType((*Dashboard_Input)(nil), "calcbiz.server.Dashboard.Input")
	proto.RegisterType((*Dashboard_Output)(nil), "calcbiz.server.Dashboard.Output")
	proto.RegisterType((*Hackz)(nil), "calcbiz.server.Hackz")
	proto.RegisterType((*Hackz_Input)(nil), "calcbiz.server.Hackz.Input")
	proto.RegisterType((*Hackz_Output)(nil), "calcbiz.server.Hackz.Output")
	proto.RegisterType((*Crew)(nil), "calcbiz.server.Crew")
	proto.RegisterType((*Crew_Input)(nil), "calcbiz.server.Crew.Input")
	proto.RegisterType((*Crew_Output)(nil), "calcbiz.server.Crew.Output")
	proto.RegisterType((*SoundcloudMe)(nil), "calcbiz.server.SoundcloudMe")
	proto.RegisterType((*SoundcloudMe_Input)(nil), "calcbiz.server.SoundcloudMe.Input")
	proto.RegisterType((*SoundcloudMe_Output)(nil), "calcbiz.server.SoundcloudMe.Output")
	proto.RegisterType((*SoundcloudPlaylists)(nil), "calcbiz.server.SoundcloudPlaylists")
	proto.RegisterType((*SoundcloudPlaylists_Input)(nil), "calcbiz.server.SoundcloudPlaylists.Input")
	proto.RegisterType((*SoundcloudPlaylists_Output)(nil), "calcbiz.server.SoundcloudPlaylists.Output")
	proto.RegisterType((*SoundcloudPlaylist)(nil), "calcbiz.server.SoundcloudPlaylist")
	proto.RegisterType((*SoundcloudPlaylist_Input)(nil), "calcbiz.server.SoundcloudPlaylist.Input")
	proto.RegisterType((*SoundcloudPlaylist_Output)(nil), "calcbiz.server.SoundcloudPlaylist.Output")
	proto.RegisterType((*SoundcloudTracks)(nil), "calcbiz.server.SoundcloudTracks")
	proto.RegisterType((*SoundcloudTracks_Input)(nil), "calcbiz.server.SoundcloudTracks.Input")
	proto.RegisterType((*SoundcloudTracks_Output)(nil), "calcbiz.server.SoundcloudTracks.Output")
	proto.RegisterType((*SoundcloudTrack)(nil), "calcbiz.server.SoundcloudTrack")
	proto.RegisterType((*SoundcloudTrack_Input)(nil), "calcbiz.server.SoundcloudTrack.Input")
	proto.RegisterType((*SoundcloudTrack_Output)(nil), "calcbiz.server.SoundcloudTrack.Output")
	proto.RegisterType((*Metrics)(nil), "calcbiz.server.Metrics")
	proto.RegisterType((*Metrics_Input)(nil), "calcbiz.server.Metrics.Input")
	proto.RegisterType((*Metrics_Output)(nil), "calcbiz.server.Metrics.Output")
	proto.RegisterType((*Ping)(nil), "calcbiz.server.Ping")
	proto.RegisterType((*Ping_Input)(nil), "calcbiz.server.Ping.Input")
	proto.RegisterType((*Ping_Output)(nil), "calcbiz.server.Ping.Output")
	proto.RegisterType((*Kryptos)(nil), "calcbiz.server.Kryptos")
	proto.RegisterType((*Kryptos_Input)(nil), "calcbiz.server.Kryptos.Input")
	proto.RegisterType((*Kryptos_Output)(nil), "calcbiz.server.Kryptos.Output")
	proto.RegisterType((*TpyoEnocde)(nil), "calcbiz.server.TpyoEnocde")
	proto.RegisterType((*TpyoEnocde_Ipunt)(nil), "calcbiz.server.TpyoEnocde.Ipunt")
	proto.RegisterType((*TpyoEnocde_Ouptut)(nil), "calcbiz.server.TpyoEnocde.Ouptut")
	proto.RegisterType((*Numberinfo)(nil), "calcbiz.server.Numberinfo")
	proto.RegisterType((*Numberinfo_Input)(nil), "calcbiz.server.Numberinfo.Input")
	proto.RegisterType((*Numberinfo_Output)(nil), "calcbiz.server.Numberinfo.Output")
	proto.RegisterMapType((map[string]string)(nil), "calcbiz.server.Numberinfo.Output.FactsEntry")
	proto.RegisterType((*Moijaime)(nil), "calcbiz.server.Moijaime")
	proto.RegisterType((*Moijaime_Input)(nil), "calcbiz.server.Moijaime.Input")
	proto.RegisterType((*Moijaime_Output)(nil), "calcbiz.server.Moijaime.Output")
	proto.RegisterType((*Wotd)(nil), "calcbiz.server.Wotd")
	proto.RegisterType((*Wotd_Input)(nil), "calcbiz.server.Wotd.Input")
	proto.RegisterType((*Wotd_Output)(nil), "calcbiz.server.Wotd.Output")
	proto.RegisterType((*AlternateLogo)(nil), "calcbiz.server.AlternateLogo")
	proto.RegisterType((*AlternateLogo_Input)(nil), "calcbiz.server.AlternateLogo.Input")
	proto.RegisterType((*AlternateLogo_Output)(nil), "calcbiz.server.AlternateLogo.Output")
	proto.RegisterType((*SpreadshirtRandom)(nil), "calcbiz.server.SpreadshirtRandom")
	proto.RegisterType((*SpreadshirtRandom_Input)(nil), "calcbiz.server.SpreadshirtRandom.Input")
	proto.RegisterType((*SpreadshirtRandom_Output)(nil), "calcbiz.server.SpreadshirtRandom.Output")
	proto.RegisterType((*SpreadshirtAll)(nil), "calcbiz.server.SpreadshirtAll")
	proto.RegisterType((*SpreadshirtAll_Input)(nil), "calcbiz.server.SpreadshirtAll.Input")
	proto.RegisterType((*SpreadshirtAll_Output)(nil), "calcbiz.server.SpreadshirtAll.Output")
	proto.RegisterType((*Recettator)(nil), "calcbiz.server.Recettator")
	proto.RegisterType((*Recettator_Input)(nil), "calcbiz.server.Recettator.Input")
	proto.RegisterType((*Recettator_Output)(nil), "calcbiz.server.Recettator.Output")
	proto.RegisterType((*Recettator_Ingredient)(nil), "calcbiz.server.Recettator.Ingredient")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4b, 0x6f, 0x1b, 0xb7,
	0x16, 0xce, 0xc8, 0x92, 0x1f, 0xf4, 0x9b, 0x51, 0x1c, 0x79, 0xec, 0xc8, 0xf6, 0x38, 0x0f, 0x39,
	0xb8, 0x91, 0x2e, 0x9c, 0x8b, 0x8b, 0xdc, 0xdc, 0xa2, 0xa8, 0x9d, 0xb8, 0xa8, 0x91, 0xa6, 0x75,
	0xc7, 0x4e, 0x8b, 0x66, 0x51, 0x61, 0xa4, 0xa1, 0xe5, 0x89, 0x66, 0x86, 0x53, 0x0e, 0x15, 0x47,
	0x36, 0xb2, 0x49, 0x81, 0x76, 0xd1, 0x45, 0x5b, 0x74, 0x53, 0xf4, 0x27, 0x74, 0xd7, 0x4d, 0x7f,
	0x42, 0x91, 0x65, 0x80, 0x6e, 0xba, 0x2c, 0x92, 0xae, 0xfb, 0x1b, 0x0a, 0x92, 0x67, 0x1e, 0xd6,
	0x48, 0x76, 0x0a, 0xb4, 0x3b, 0xf2, 0x9c, 0x8f, 0xdf, 0xf7, 0xf1, 0x90, 0xe2, 0x90, 0x42, 0x63,
	0x56, 0xe0, 0x54, 0x03, 0x46, 0x39, 0xc5, 0x53, 0x4d, 0xcb, 0x6d, 0x36, 0x9c, 0xa3, 0x6a, 0x48,
	0xd8, 0x63, 0xc2, 0xf4, 0xc5, 0x16, 0xa5, 0x2d, 0x97, 0xd4, 0xac, 0xc0, 0xa9, 0x59, 0xbe, 0x4f,
	0xb9, 0xc5, 0x1d, 0xea, 0x87, 0x0a, 0xad, 0xdf, 0x68, 0x39, 0xfc, 0xa0, 0xd3, 0xa8, 0x36, 0xa9,
	0x57, 0x6b, 0xd1, 0x16, 0xad, 0xc9, 0x70, 0xa3, 0xb3, 0x2f, 0x7b, 0xb2, 0x23, 0x5b, 0x00, 0x47,
	0x4d, 0x46, 0x0e, 0xa1, 0x3d, 0x6d, 0x5b, 0xe1, 0x41, 0x83, 0x5a, 0xcc, 0x86, 0xc0, 0x4c, 0x48,
	0x3b, 0xbe, 0xdd, 0x74, 0x69, 0x07, 0x22, 0xc6, 0x1e, 0x1a, 0xbb, 0x1b, 0x81, 0xf4, 0x11, 0x54,
	0xd8, 0xf6, 0x83, 0x0e, 0xd7, 0xdf, 0x44, 0xc3, 0xef, 0x77, 0x78, 0xd0, 0xe1, 0xf8, 0x3f, 0x68,
	0x84, 0xf8, 0x9c, 0x39, 0x24, 0x2c, 0x69, 0xcb, 0x5a, 0x65, 0x7c, 0x5d, 0xaf, 0x46, 0xee, 0x13,
	0xf2, 0x2d, 0x85, 0x30, 0x23, 0xa8, 0xb1, 0x83, 0x0a, 0xef, 0x58, 0xcd, 0xf6, 0xd1, 0xdf, 0xc7,
	0xb8, 0x81, 0xf2, 0x77, 0x18, 0x39, 0x4c, 0x08, 0xff, 0x1d, 0x13, 0x5e, 0x45, 0x79, 0x31, 0x67,
	0x60, 0xc3, 0x31, 0x9b, 0x2c, 0x84, 0x18, 0x64, 0xca, 0xbc, 0x71, 0x0f, 0x4d, 0xec, 0xc6, 0xd3,
	0xbf, 0x4f, 0x12, 0xaa, 0xf5, 0x98, 0xaa, 0x82, 0x72, 0x1e, 0x01, 0xa2, 0x52, 0x4c, 0x94, 0x2a,
	0xda, 0x83, 0x90, 0x30, 0x33, 0xe7, 0x11, 0x83, 0xa0, 0xf3, 0x09, 0xd9, 0x8e, 0x6b, 0x75, 0x5d,
	0x27, 0xe4, 0x61, 0xc2, 0xb9, 0x15, 0x73, 0xfe, 0x1f, 0x8d, 0x05, 0x51, 0x1e, 0xa8, 0x2f, 0xf5,
	0xa3, 0x8e, 0x49, 0xcc, 0x04, 0x6f, 0x3c, 0xd3, 0x10, 0xce, 0xea, 0xe8, 0x15, 0x90, 0xc1, 0x4b,
	0x68, 0x3c, 0x02, 0xd7, 0x1d, 0x5b, 0xd2, 0xe7, 0x4d, 0x14, 0x85, 0xb6, 0x6d, 0x7d, 0x33, 0xf6,
	0x71, 0x0b, 0x8d, 0x46, 0x71, 0xb0, 0xb1, 0x78, 0x9a, 0x0d, 0x33, 0x46, 0x1b, 0x1f, 0xa3, 0x99,
	0xc4, 0xc3, 0x1e, 0xb3, 0x9a, 0xed, 0xd4, 0x44, 0xdf, 0x88, 0x05, 0xd6, 0xd1, 0x30, 0x97, 0xc9,
	0xcc, 0xba, 0xa6, 0xe8, 0xd5, 0x70, 0x13, 0x90, 0x46, 0x80, 0xa6, 0x7b, 0xa8, 0x75, 0x23, 0x9a,
	0xdb, 0x3c, 0x1a, 0x95, 0xa8, 0x64, 0x62, 0x23, 0xb2, 0xbf, 0x6d, 0xeb, 0xff, 0x8b, 0x45, 0x6b,
	0xa8, 0x20, 0x83, 0xa0, 0x39, 0x3f, 0x50, 0xd3, 0x54, 0x38, 0xe3, 0x67, 0x0d, 0x8d, 0xdc, 0x27,
	0x9c, 0x39, 0xcd, 0xd4, 0x24, 0x7e, 0xd4, 0x52, 0xbb, 0x69, 0x3a, 0x14, 0x3f, 0xc0, 0x66, 0xbd,
	0x41, 0x9f, 0xd4, 0x43, 0xe7, 0x48, 0xed, 0x87, 0x82, 0x39, 0xa9, 0xc2, 0x9b, 0xf4, 0xc9, 0xae,
	0x73, 0x44, 0xf0, 0x75, 0x34, 0xab, 0x7e, 0xbe, 0xf5, 0x90, 0x5b, 0x8c, 0xd7, 0xb9, 0xe3, 0x91,
	0x52, 0x6e, 0x59, 0xab, 0x8c, 0x99, 0xd3, 0x2a, 0xb1, 0x2b, 0xe2, 0x7b, 0x8e, 0x47, 0x70, 0x15,
	0x9d, 0x07, 0x6c, 0xb3, 0xc3, 0x18, 0xf1, 0x01, 0x3d, 0x24, 0xd1, 0x40, 0x73, 0x47, 0x65, 0x24,
	0x7e, 0x15, 0x4d, 0x02, 0xbe, 0x13, 0x48, 0x64, 0x5e, 0x22, 0x27, 0x54, 0xf0, 0x81, 0x8c, 0x19,
	0x37, 0x50, 0x7e, 0xc7, 0xf1, 0x5b, 0xc9, 0x24, 0x16, 0xe3, 0x39, 0x60, 0x94, 0x0f, 0xa8, 0xdf,
	0x92, 0xc6, 0xc7, 0x4c, 0xd9, 0x36, 0xde, 0x42, 0x23, 0xf7, 0x58, 0x37, 0xe0, 0x34, 0xd4, 0x17,
	0xa2, 0x0a, 0x63, 0x94, 0xdf, 0x67, 0xd4, 0x8b, 0x70, 0xa2, 0xad, 0x97, 0x62, 0x96, 0x29, 0x94,
	0xe3, 0x14, 0x72, 0x39, 0x4e, 0x8d, 0x3b, 0x08, 0xed, 0x05, 0x5d, 0xba, 0xe5, 0xd3, 0xa6, 0x4d,
	0x24, 0x49, 0xd0, 0xf1, 0x15, 0x09, 0x65, 0x09, 0x09, 0x65, 0x40, 0x12, 0xf0, 0x3e, 0x24, 0x3f,
	0x69, 0x08, 0xbd, 0xd7, 0xf1, 0x1a, 0x84, 0x39, 0xfe, 0x3e, 0xd5, 0x97, 0x22, 0x2b, 0x73, 0x68,
	0xd8, 0x97, 0x61, 0x89, 0xcd, 0x99, 0xd0, 0xd3, 0x3f, 0x4f, 0x56, 0x66, 0x13, 0x15, 0xf6, 0xad,
	0xa6, 0xfc, 0x11, 0x0d, 0x55, 0xc6, 0xd7, 0xff, 0x55, 0x3d, 0x79, 0x8c, 0x56, 0x13, 0xda, 0xaa,
	0x1a, 0x51, 0x7d, 0x5b, 0xc0, 0xc5, 0x51, 0xd2, 0x35, 0xd5, 0x50, 0xfd, 0x16, 0x42, 0x49, 0x10,
	0xcf, 0xa0, 0xa1, 0x36, 0xe9, 0x82, 0x3b, 0xd1, 0xc4, 0x45, 0x54, 0x78, 0x6c, 0xb9, 0x9d, 0x68,
	0x25, 0x55, 0xe7, 0x76, 0xee, 0x96, 0x66, 0xdc, 0x44, 0xa3, 0xf7, 0xa9, 0xf3, 0xc8, 0x72, 0xbc,
	0xd4, 0xc9, 0x51, 0x8e, 0xcd, 0x15, 0x51, 0xa1, 0xed, 0xec, 0xef, 0x2b, 0x73, 0x63, 0xa6, 0xea,
	0x88, 0x35, 0xfa, 0x88, 0x72, 0x7b, 0xc0, 0x1a, 0x1d, 0x52, 0x66, 0x47, 0x65, 0x13, 0x6d, 0xe3,
	0xbf, 0x68, 0x72, 0xc3, 0xe5, 0x84, 0xf9, 0x16, 0x27, 0xef, 0xd2, 0x16, 0x1d, 0xb4, 0xb6, 0x16,
	0x3f, 0x88, 0xd7, 0xd6, 0xe2, 0x07, 0xc6, 0x55, 0x34, 0xbb, 0x1b, 0x30, 0x62, 0xd9, 0xe1, 0x81,
	0xc3, 0xb8, 0x69, 0xf9, 0x36, 0xf5, 0x92, 0xb1, 0xa3, 0xd1, 0x58, 0x63, 0x15, 0x4d, 0xa5, 0x70,
	0x1b, 0xae, 0xdb, 0x0f, 0xf4, 0x5d, 0x01, 0x21, 0x93, 0x34, 0x09, 0xe7, 0x16, 0xa7, 0x4c, 0xff,
	0x46, 0x4b, 0xed, 0x96, 0x90, 0x10, 0xe5, 0x78, 0xc8, 0x94, 0x6d, 0xbc, 0x86, 0x66, 0x3c, 0xcb,
	0xf1, 0xeb, 0x8e, 0xdf, 0x62, 0xc4, 0x76, 0x88, 0xcf, 0x43, 0x59, 0xba, 0xbc, 0x39, 0x2d, 0xe2,
	0xdb, 0x49, 0x18, 0xdf, 0x44, 0x17, 0x42, 0xd2, 0xa4, 0xbe, 0x6d, 0xb1, 0xee, 0x09, 0xfc, 0x90,
	0xc4, 0x17, 0xe3, 0x64, 0x7a, 0x50, 0x11, 0x15, 0x42, 0x4e, 0x82, 0x50, 0xfe, 0x02, 0xf2, 0xa6,
	0xea, 0xe8, 0x3f, 0xe4, 0xd2, 0x75, 0xe7, 0x0e, 0x77, 0x09, 0xd4, 0x43, 0x75, 0xc4, 0x6e, 0x0a,
	0x08, 0x0d, 0x5c, 0x02, 0x66, 0xa0, 0x87, 0x75, 0x34, 0xea, 0x59, 0xac, 0x6d, 0xd3, 0x43, 0x1f,
	0x7e, 0x7d, 0x71, 0x3f, 0x2d, 0x25, 0x57, 0x50, 0x76, 0xf0, 0x4e, 0x9f, 0x09, 0x16, 0xe4, 0xfe,
	0xbb, 0xd2, 0xbb, 0xff, 0x92, 0xa2, 0x55, 0x93, 0x29, 0x64, 0xeb, 0xf0, 0x70, 0x50, 0x1d, 0x86,
	0xff, 0x0a, 0x6d, 0xff, 0x72, 0x45, 0x4b, 0x34, 0x92, 0x2c, 0x91, 0xfe, 0x5c, 0x43, 0x28, 0xc1,
	0x08, 0x88, 0x6f, 0x79, 0x51, 0xbd, 0x64, 0x5b, 0x94, 0xe5, 0xd3, 0x8e, 0xe5, 0x73, 0x87, 0x77,
	0x61, 0xe3, 0xc7, 0x7d, 0x51, 0x4a, 0x8f, 0xf0, 0x03, 0x6a, 0x43, 0xc1, 0xa0, 0x27, 0xe2, 0x2d,
	0xe2, 0xdb, 0x84, 0xc1, 0xe1, 0x04, 0x3d, 0x59, 0xe2, 0x8e, 0xcb, 0x1d, 0x51, 0xfc, 0xc2, 0xb2,
	0x56, 0x19, 0x35, 0xe3, 0xbe, 0xd0, 0x6e, 0x3b, 0xbe, 0x5d, 0x1a, 0x56, 0xda, 0xa2, 0x2d, 0xce,
	0x51, 0xe1, 0xa1, 0x6e, 0xf9, 0x76, 0x3d, 0x36, 0x31, 0xa2, 0xce, 0x51, 0x91, 0xd8, 0xf0, 0xed,
	0x0f, 0x20, 0xbc, 0xfe, 0xc7, 0x2c, 0x1a, 0xde, 0x95, 0x55, 0xc1, 0x01, 0x9a, 0x82, 0xe3, 0x6c,
	0xcb, 0x6f, 0x8a, 0x06, 0xbe, 0xd4, 0x5b, 0x38, 0xc8, 0x57, 0xe1, 0xa7, 0x3a, 0x28, 0x0d, 0xdb,
	0x7e, 0xe9, 0xd9, 0x2f, 0xbf, 0x7f, 0x9b, 0x9b, 0x37, 0x8a, 0xf2, 0x1a, 0xd6, 0x56, 0xc9, 0x1a,
	0x51, 0xe4, 0xb7, 0xb5, 0xeb, 0x29, 0xc5, 0xbb, 0xe4, 0x1f, 0x54, 0xb4, 0x49, 0xac, 0xd8, 0x4a,
	0x1f, 0xb8, 0x78, 0xb9, 0x97, 0x2e, 0xc9, 0x55, 0xe5, 0x49, 0xac, 0xaf, 0x9c, 0x82, 0x50, 0xc7,
	0xb1, 0x51, 0x94, 0x9a, 0x53, 0xc6, 0x98, 0xd4, 0xe4, 0x41, 0x97, 0x0a, 0x21, 0x53, 0x7d, 0x4a,
	0xb0, 0xde, 0x4b, 0x20, 0xa2, 0x30, 0x9b, 0x85, 0xbe, 0x39, 0x98, 0xca, 0xac, 0xa4, 0x1d, 0xc7,
	0x8a, 0x36, 0x10, 0x5c, 0xfb, 0xa9, 0x8b, 0x25, 0x5e, 0xea, 0x1d, 0x1c, 0xa7, 0x80, 0x7d, 0x79,
	0x30, 0x00, 0x24, 0xe6, 0xa4, 0xc4, 0x0c, 0x9e, 0x92, 0x12, 0xf1, 0x4d, 0x11, 0x7f, 0x08, 0x57,
	0x4d, 0x9c, 0x31, 0x28, 0xc3, 0xc0, 0xbf, 0xd8, 0x3f, 0x09, 0xdc, 0x58, 0x72, 0x4f, 0x60, 0x24,
	0xb9, 0x0f, 0x24, 0x9d, 0xa9, 0x2e, 0x9c, 0xd9, 0x9a, 0x88, 0xe8, 0xa0, 0x9a, 0xc8, 0x5c, 0xdf,
	0x9a, 0x88, 0x1b, 0x28, 0x0e, 0xd3, 0xdf, 0xbe, 0xec, 0x82, 0xa6, 0x3e, 0x60, 0x8a, 0x7f, 0xe5,
	0xcc, 0x4f, 0x9c, 0xb1, 0x2c, 0x55, 0x74, 0x5c, 0x92, 0x2a, 0x7e, 0x9c, 0xaf, 0x1d, 0xab, 0xf6,
	0x53, 0xfc, 0x28, 0x7d, 0x9c, 0x67, 0x45, 0x4f, 0x1c, 0x2f, 0x7d, 0x45, 0x53, 0x08, 0x10, 0xbd,
	0x28, 0x45, 0x67, 0xf1, 0xb4, 0x14, 0x65, 0x09, 0x7b, 0x23, 0xf9, 0x48, 0xe2, 0xcc, 0xf6, 0x8f,
	0x32, 0xa0, 0xb3, 0x34, 0x30, 0x0f, 0x2a, 0x17, 0xa4, 0xca, 0x34, 0x9e, 0x94, 0x2a, 0x5e, 0xc4,
	0xfb, 0x85, 0xd6, 0xe7, 0x6b, 0x87, 0xaf, 0xf5, 0xb2, 0x65, 0x20, 0x20, 0x5b, 0x39, 0x1b, 0x78,
	0xf2, 0xf7, 0x89, 0x2f, 0x4a, 0xfd, 0x30, 0x81, 0xd5, 0x98, 0xd2, 0x3c, 0xee, 0xfd, 0x9c, 0xe2,
	0xcb, 0xa7, 0x90, 0x6f, 0xb8, 0x2e, 0x58, 0xb8, 0x72, 0x06, 0x0a, 0xf4, 0x17, 0xa5, 0xfe, 0x1c,
	0x2e, 0x66, 0xf4, 0x2d, 0xd7, 0x15, 0xfb, 0x53, 0x5c, 0x2d, 0xb2, 0xfb, 0x53, 0x44, 0x07, 0xed,
	0x4f, 0x99, 0xeb, 0xbb, 0x3f, 0x0f, 0x05, 0xd7, 0x61, 0xcf, 0xfd, 0x03, 0xaf, 0xf6, 0x12, 0x9c,
	0x48, 0x83, 0xca, 0xe5, 0xd3, 0x41, 0x20, 0xb7, 0x20, 0xe5, 0x2e, 0xe0, 0xf3, 0xea, 0x99, 0x1b,
	0x41, 0x6e, 0xb8, 0x42, 0x27, 0x3c, 0xf9, 0x34, 0xc3, 0x46, 0xa6, 0x42, 0xa9, 0x2c, 0xc8, 0xae,
	0x9e, 0x8a, 0x01, 0x55, 0x5d, 0xaa, 0x16, 0x31, 0x56, 0x35, 0x8c, 0x11, 0x35, 0x8f, 0xe0, 0xaf,
	0xb4, 0xbe, 0x6f, 0x38, 0xbc, 0x36, 0x98, 0x38, 0x06, 0x81, 0x87, 0xeb, 0xaf, 0x03, 0x05, 0x2b,
	0x2b, 0xd2, 0xca, 0x02, 0x9e, 0xef, 0xb5, 0x12, 0xbf, 0xf6, 0xf0, 0xf7, 0x7d, 0x5f, 0x7b, 0xb8,
	0x72, 0xb6, 0x0a, 0xf8, 0x79, 0x0d, 0xeb, 0x91, 0x9d, 0x9a, 0xb4, 0xb3, 0x86, 0xaf, 0x0d, 0xb4,
	0x53, 0x3b, 0x4e, 0x3d, 0x2d, 0x9f, 0xe2, 0xcf, 0xb4, 0xec, 0x33, 0x10, 0x5f, 0x1d, 0x2c, 0xa8,
	0x10, 0x60, 0xec, 0xda, 0x99, 0x38, 0xb0, 0x55, 0x96, 0xb6, 0x4a, 0x78, 0xae, 0xd7, 0x96, 0x7a,
	0x30, 0xe2, 0x2f, 0xb5, 0xcc, 0x8b, 0x11, 0x5f, 0x39, 0x83, 0x1c, 0x3c, 0x9c, 0xe5, 0x35, 0xb2,
	0xb0, 0x26, 0x2d, 0xac, 0xe2, 0x95, 0xfe, 0x16, 0x6a, 0xc7, 0xd1, 0xab, 0xf4, 0x29, 0xfe, 0x24,
	0x7e, 0x4b, 0x66, 0x2f, 0x03, 0x90, 0x18, 0x74, 0x19, 0x88, 0xd2, 0x20, 0x0a, 0x1f, 0x66, 0x3c,
	0xa1, 0x0e, 0x3b, 0x95, 0xdc, 0x5c, 0x7f, 0xfe, 0xb2, 0xac, 0xbd, 0x78, 0x59, 0xd6, 0x7e, 0x7b,
	0x59, 0xd6, 0xbe, 0x7e, 0x55, 0x3e, 0xf7, 0xe2, 0x55, 0xf9, 0xdc, 0xaf, 0xaf, 0xca, 0xe7, 0x1e,
	0x96, 0x3a, 0x2e, 0x67, 0xa4, 0xea, 0x91, 0x1a, 0xf0, 0xd6, 0x82, 0x76, 0x4b, 0x8c, 0x6d, 0x0c,
	0xcb, 0x3f, 0x76, 0x6e, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x18, 0xf1, 0x94, 0x64, 0x71, 0x12,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerClient interface {
	KryptosEncrypt(ctx context.Context, in *Kryptos_Input, opts ...grpc.CallOption) (*Kryptos_Output, error)
	KryptosDecrypt(ctx context.Context, in *Kryptos_Input, opts ...grpc.CallOption) (*Kryptos_Output, error)
	TpyoEnocde(ctx context.Context, in *TpyoEnocde_Ipunt, opts ...grpc.CallOption) (*TpyoEnocde_Ouptut, error)
	Ping(ctx context.Context, in *Ping_Input, opts ...grpc.CallOption) (*Ping_Output, error)
	Dashboard(ctx context.Context, in *Dashboard_Input, opts ...grpc.CallOption) (*Dashboard_Output, error)
	Hackz(ctx context.Context, in *Hackz_Input, opts ...grpc.CallOption) (*Hackz_Output, error)
	Crew(ctx context.Context, in *Crew_Input, opts ...grpc.CallOption) (*Crew_Output, error)
	Numberinfo(ctx context.Context, in *Numberinfo_Input, opts ...grpc.CallOption) (*Numberinfo_Output, error)
	Recettator(ctx context.Context, in *Recettator_Input, opts ...grpc.CallOption) (*Recettator_Output, error)
	Moijaime(ctx context.Context, in *Moijaime_Input, opts ...grpc.CallOption) (*Moijaime_Output, error)
	SpreadshirtRandom(ctx context.Context, in *SpreadshirtRandom_Input, opts ...grpc.CallOption) (*SpreadshirtRandom_Output, error)
	SpreadshirtAll(ctx context.Context, in *SpreadshirtAll_Input, opts ...grpc.CallOption) (*SpreadshirtAll_Output, error)
	Wotd(ctx context.Context, in *Wotd_Input, opts ...grpc.CallOption) (*Wotd_Output, error)
	AlternateLogo(ctx context.Context, in *AlternateLogo_Input, opts ...grpc.CallOption) (*AlternateLogo_Output, error)
	SoundcloudMe(ctx context.Context, in *SoundcloudMe_Input, opts ...grpc.CallOption) (*SoundcloudMe_Output, error)
	SoundcloudPlaylists(ctx context.Context, in *SoundcloudPlaylists_Input, opts ...grpc.CallOption) (*SoundcloudPlaylists_Output, error)
	SoundcloudPlaylist(ctx context.Context, in *SoundcloudPlaylist_Input, opts ...grpc.CallOption) (*SoundcloudPlaylist_Output, error)
	SoundcloudTracks(ctx context.Context, in *SoundcloudTracks_Input, opts ...grpc.CallOption) (*SoundcloudTracks_Output, error)
	SoundcloudTrack(ctx context.Context, in *SoundcloudTrack_Input, opts ...grpc.CallOption) (*SoundcloudTrack_Output, error)
	Metrics(ctx context.Context, in *Metrics_Input, opts ...grpc.CallOption) (*Metrics_Output, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) KryptosEncrypt(ctx context.Context, in *Kryptos_Input, opts ...grpc.CallOption) (*Kryptos_Output, error) {
	out := new(Kryptos_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/KryptosEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) KryptosDecrypt(ctx context.Context, in *Kryptos_Input, opts ...grpc.CallOption) (*Kryptos_Output, error) {
	out := new(Kryptos_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/KryptosDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) TpyoEnocde(ctx context.Context, in *TpyoEnocde_Ipunt, opts ...grpc.CallOption) (*TpyoEnocde_Ouptut, error) {
	out := new(TpyoEnocde_Ouptut)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/TpyoEnocde", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Ping(ctx context.Context, in *Ping_Input, opts ...grpc.CallOption) (*Ping_Output, error) {
	out := new(Ping_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Dashboard(ctx context.Context, in *Dashboard_Input, opts ...grpc.CallOption) (*Dashboard_Output, error) {
	out := new(Dashboard_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Dashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Hackz(ctx context.Context, in *Hackz_Input, opts ...grpc.CallOption) (*Hackz_Output, error) {
	out := new(Hackz_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Hackz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Crew(ctx context.Context, in *Crew_Input, opts ...grpc.CallOption) (*Crew_Output, error) {
	out := new(Crew_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Crew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Numberinfo(ctx context.Context, in *Numberinfo_Input, opts ...grpc.CallOption) (*Numberinfo_Output, error) {
	out := new(Numberinfo_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Numberinfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Recettator(ctx context.Context, in *Recettator_Input, opts ...grpc.CallOption) (*Recettator_Output, error) {
	out := new(Recettator_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Recettator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Moijaime(ctx context.Context, in *Moijaime_Input, opts ...grpc.CallOption) (*Moijaime_Output, error) {
	out := new(Moijaime_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Moijaime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SpreadshirtRandom(ctx context.Context, in *SpreadshirtRandom_Input, opts ...grpc.CallOption) (*SpreadshirtRandom_Output, error) {
	out := new(SpreadshirtRandom_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SpreadshirtRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SpreadshirtAll(ctx context.Context, in *SpreadshirtAll_Input, opts ...grpc.CallOption) (*SpreadshirtAll_Output, error) {
	out := new(SpreadshirtAll_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SpreadshirtAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Wotd(ctx context.Context, in *Wotd_Input, opts ...grpc.CallOption) (*Wotd_Output, error) {
	out := new(Wotd_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Wotd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AlternateLogo(ctx context.Context, in *AlternateLogo_Input, opts ...grpc.CallOption) (*AlternateLogo_Output, error) {
	out := new(AlternateLogo_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/AlternateLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SoundcloudMe(ctx context.Context, in *SoundcloudMe_Input, opts ...grpc.CallOption) (*SoundcloudMe_Output, error) {
	out := new(SoundcloudMe_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SoundcloudMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SoundcloudPlaylists(ctx context.Context, in *SoundcloudPlaylists_Input, opts ...grpc.CallOption) (*SoundcloudPlaylists_Output, error) {
	out := new(SoundcloudPlaylists_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SoundcloudPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SoundcloudPlaylist(ctx context.Context, in *SoundcloudPlaylist_Input, opts ...grpc.CallOption) (*SoundcloudPlaylist_Output, error) {
	out := new(SoundcloudPlaylist_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SoundcloudPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SoundcloudTracks(ctx context.Context, in *SoundcloudTracks_Input, opts ...grpc.CallOption) (*SoundcloudTracks_Output, error) {
	out := new(SoundcloudTracks_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SoundcloudTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SoundcloudTrack(ctx context.Context, in *SoundcloudTrack_Input, opts ...grpc.CallOption) (*SoundcloudTrack_Output, error) {
	out := new(SoundcloudTrack_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/SoundcloudTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Metrics(ctx context.Context, in *Metrics_Input, opts ...grpc.CallOption) (*Metrics_Output, error) {
	out := new(Metrics_Output)
	err := c.cc.Invoke(ctx, "/calcbiz.server.Server/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
type ServerServer interface {
	KryptosEncrypt(context.Context, *Kryptos_Input) (*Kryptos_Output, error)
	KryptosDecrypt(context.Context, *Kryptos_Input) (*Kryptos_Output, error)
	TpyoEnocde(context.Context, *TpyoEnocde_Ipunt) (*TpyoEnocde_Ouptut, error)
	Ping(context.Context, *Ping_Input) (*Ping_Output, error)
	Dashboard(context.Context, *Dashboard_Input) (*Dashboard_Output, error)
	Hackz(context.Context, *Hackz_Input) (*Hackz_Output, error)
	Crew(context.Context, *Crew_Input) (*Crew_Output, error)
	Numberinfo(context.Context, *Numberinfo_Input) (*Numberinfo_Output, error)
	Recettator(context.Context, *Recettator_Input) (*Recettator_Output, error)
	Moijaime(context.Context, *Moijaime_Input) (*Moijaime_Output, error)
	SpreadshirtRandom(context.Context, *SpreadshirtRandom_Input) (*SpreadshirtRandom_Output, error)
	SpreadshirtAll(context.Context, *SpreadshirtAll_Input) (*SpreadshirtAll_Output, error)
	Wotd(context.Context, *Wotd_Input) (*Wotd_Output, error)
	AlternateLogo(context.Context, *AlternateLogo_Input) (*AlternateLogo_Output, error)
	SoundcloudMe(context.Context, *SoundcloudMe_Input) (*SoundcloudMe_Output, error)
	SoundcloudPlaylists(context.Context, *SoundcloudPlaylists_Input) (*SoundcloudPlaylists_Output, error)
	SoundcloudPlaylist(context.Context, *SoundcloudPlaylist_Input) (*SoundcloudPlaylist_Output, error)
	SoundcloudTracks(context.Context, *SoundcloudTracks_Input) (*SoundcloudTracks_Output, error)
	SoundcloudTrack(context.Context, *SoundcloudTrack_Input) (*SoundcloudTrack_Output, error)
	Metrics(context.Context, *Metrics_Input) (*Metrics_Output, error)
}

// UnimplementedServerServer can be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (*UnimplementedServerServer) KryptosEncrypt(ctx context.Context, req *Kryptos_Input) (*Kryptos_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KryptosEncrypt not implemented")
}
func (*UnimplementedServerServer) KryptosDecrypt(ctx context.Context, req *Kryptos_Input) (*Kryptos_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KryptosDecrypt not implemented")
}
func (*UnimplementedServerServer) TpyoEnocde(ctx context.Context, req *TpyoEnocde_Ipunt) (*TpyoEnocde_Ouptut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpyoEnocde not implemented")
}
func (*UnimplementedServerServer) Ping(ctx context.Context, req *Ping_Input) (*Ping_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedServerServer) Dashboard(ctx context.Context, req *Dashboard_Input) (*Dashboard_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dashboard not implemented")
}
func (*UnimplementedServerServer) Hackz(ctx context.Context, req *Hackz_Input) (*Hackz_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hackz not implemented")
}
func (*UnimplementedServerServer) Crew(ctx context.Context, req *Crew_Input) (*Crew_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crew not implemented")
}
func (*UnimplementedServerServer) Numberinfo(ctx context.Context, req *Numberinfo_Input) (*Numberinfo_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Numberinfo not implemented")
}
func (*UnimplementedServerServer) Recettator(ctx context.Context, req *Recettator_Input) (*Recettator_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recettator not implemented")
}
func (*UnimplementedServerServer) Moijaime(ctx context.Context, req *Moijaime_Input) (*Moijaime_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Moijaime not implemented")
}
func (*UnimplementedServerServer) SpreadshirtRandom(ctx context.Context, req *SpreadshirtRandom_Input) (*SpreadshirtRandom_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpreadshirtRandom not implemented")
}
func (*UnimplementedServerServer) SpreadshirtAll(ctx context.Context, req *SpreadshirtAll_Input) (*SpreadshirtAll_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpreadshirtAll not implemented")
}
func (*UnimplementedServerServer) Wotd(ctx context.Context, req *Wotd_Input) (*Wotd_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wotd not implemented")
}
func (*UnimplementedServerServer) AlternateLogo(ctx context.Context, req *AlternateLogo_Input) (*AlternateLogo_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlternateLogo not implemented")
}
func (*UnimplementedServerServer) SoundcloudMe(ctx context.Context, req *SoundcloudMe_Input) (*SoundcloudMe_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundcloudMe not implemented")
}
func (*UnimplementedServerServer) SoundcloudPlaylists(ctx context.Context, req *SoundcloudPlaylists_Input) (*SoundcloudPlaylists_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundcloudPlaylists not implemented")
}
func (*UnimplementedServerServer) SoundcloudPlaylist(ctx context.Context, req *SoundcloudPlaylist_Input) (*SoundcloudPlaylist_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundcloudPlaylist not implemented")
}
func (*UnimplementedServerServer) SoundcloudTracks(ctx context.Context, req *SoundcloudTracks_Input) (*SoundcloudTracks_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundcloudTracks not implemented")
}
func (*UnimplementedServerServer) SoundcloudTrack(ctx context.Context, req *SoundcloudTrack_Input) (*SoundcloudTrack_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundcloudTrack not implemented")
}
func (*UnimplementedServerServer) Metrics(ctx context.Context, req *Metrics_Input) (*Metrics_Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_KryptosEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Kryptos_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).KryptosEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/KryptosEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).KryptosEncrypt(ctx, req.(*Kryptos_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_KryptosDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Kryptos_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).KryptosDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/KryptosDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).KryptosDecrypt(ctx, req.(*Kryptos_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_TpyoEnocde_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpyoEnocde_Ipunt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).TpyoEnocde(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/TpyoEnocde",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).TpyoEnocde(ctx, req.(*TpyoEnocde_Ipunt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Ping(ctx, req.(*Ping_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Dashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dashboard_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Dashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Dashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Dashboard(ctx, req.(*Dashboard_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Hackz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hackz_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Hackz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Hackz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Hackz(ctx, req.(*Hackz_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Crew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crew_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Crew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Crew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Crew(ctx, req.(*Crew_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Numberinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numberinfo_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Numberinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Numberinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Numberinfo(ctx, req.(*Numberinfo_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Recettator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Recettator_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Recettator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Recettator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Recettator(ctx, req.(*Recettator_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Moijaime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Moijaime_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Moijaime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Moijaime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Moijaime(ctx, req.(*Moijaime_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SpreadshirtRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpreadshirtRandom_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SpreadshirtRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SpreadshirtRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SpreadshirtRandom(ctx, req.(*SpreadshirtRandom_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SpreadshirtAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpreadshirtAll_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SpreadshirtAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SpreadshirtAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SpreadshirtAll(ctx, req.(*SpreadshirtAll_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Wotd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Wotd_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Wotd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Wotd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Wotd(ctx, req.(*Wotd_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AlternateLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlternateLogo_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AlternateLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/AlternateLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AlternateLogo(ctx, req.(*AlternateLogo_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SoundcloudMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundcloudMe_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SoundcloudMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SoundcloudMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SoundcloudMe(ctx, req.(*SoundcloudMe_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SoundcloudPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundcloudPlaylists_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SoundcloudPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SoundcloudPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SoundcloudPlaylists(ctx, req.(*SoundcloudPlaylists_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SoundcloudPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundcloudPlaylist_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SoundcloudPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SoundcloudPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SoundcloudPlaylist(ctx, req.(*SoundcloudPlaylist_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SoundcloudTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundcloudTracks_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SoundcloudTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SoundcloudTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SoundcloudTracks(ctx, req.(*SoundcloudTracks_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SoundcloudTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundcloudTrack_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SoundcloudTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/SoundcloudTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SoundcloudTrack(ctx, req.(*SoundcloudTrack_Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics_Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calcbiz.server.Server/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Metrics(ctx, req.(*Metrics_Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calcbiz.server.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KryptosEncrypt",
			Handler:    _Server_KryptosEncrypt_Handler,
		},
		{
			MethodName: "KryptosDecrypt",
			Handler:    _Server_KryptosDecrypt_Handler,
		},
		{
			MethodName: "TpyoEnocde",
			Handler:    _Server_TpyoEnocde_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Server_Ping_Handler,
		},
		{
			MethodName: "Dashboard",
			Handler:    _Server_Dashboard_Handler,
		},
		{
			MethodName: "Hackz",
			Handler:    _Server_Hackz_Handler,
		},
		{
			MethodName: "Crew",
			Handler:    _Server_Crew_Handler,
		},
		{
			MethodName: "Numberinfo",
			Handler:    _Server_Numberinfo_Handler,
		},
		{
			MethodName: "Recettator",
			Handler:    _Server_Recettator_Handler,
		},
		{
			MethodName: "Moijaime",
			Handler:    _Server_Moijaime_Handler,
		},
		{
			MethodName: "SpreadshirtRandom",
			Handler:    _Server_SpreadshirtRandom_Handler,
		},
		{
			MethodName: "SpreadshirtAll",
			Handler:    _Server_SpreadshirtAll_Handler,
		},
		{
			MethodName: "Wotd",
			Handler:    _Server_Wotd_Handler,
		},
		{
			MethodName: "AlternateLogo",
			Handler:    _Server_AlternateLogo_Handler,
		},
		{
			MethodName: "SoundcloudMe",
			Handler:    _Server_SoundcloudMe_Handler,
		},
		{
			MethodName: "SoundcloudPlaylists",
			Handler:    _Server_SoundcloudPlaylists_Handler,
		},
		{
			MethodName: "SoundcloudPlaylist",
			Handler:    _Server_SoundcloudPlaylist_Handler,
		},
		{
			MethodName: "SoundcloudTracks",
			Handler:    _Server_SoundcloudTracks_Handler,
		},
		{
			MethodName: "SoundcloudTrack",
			Handler:    _Server_SoundcloudTrack_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Server_Metrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *Dashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Dashboard_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dashboard_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dashboard_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Dashboard_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dashboard_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dashboard_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entries != nil {
		{
			size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hackz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hackz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hackz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Hackz_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hackz_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hackz_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Hackz_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hackz_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hackz_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entries != nil {
		{
			size, err := m.Entries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Crew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Crew_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crew_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crew_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Crew_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crew_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crew_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Crew != nil {
		{
			size, err := m.Crew.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudMe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudMe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudMe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudMe_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudMe_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudMe_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudMe_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudMe_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudMe_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Me != nil {
		{
			size, err := m.Me.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylists) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylists) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylists) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylists_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylists_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylists_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylists_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylists_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylists_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Playlists != nil {
		{
			size, err := m.Playlists.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylist_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylist_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylist_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlaylistId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlaylistId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudPlaylist_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudPlaylist_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudPlaylist_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Playlist != nil {
		{
			size, err := m.Playlist.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudTracks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTracks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTracks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudTracks_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTracks_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTracks_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudTracks_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTracks_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTracks_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tracks != nil {
		{
			size, err := m.Tracks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudTrack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTrack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTrack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SoundcloudTrack_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTrack_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTrack_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrackId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TrackId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SoundcloudTrack_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoundcloudTrack_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SoundcloudTrack_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Track != nil {
		{
			size, err := m.Track.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Metrics_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metrics_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Metrics_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metrics_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerUptime) > 0 {
		i -= len(m.ServerUptime)
		copy(dAtA[i:], m.ServerUptime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerUptime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerCurrentTime) > 0 {
		i -= len(m.ServerCurrentTime)
		copy(dAtA[i:], m.ServerCurrentTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerCurrentTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerStartTime) > 0 {
		i -= len(m.ServerStartTime)
		copy(dAtA[i:], m.ServerStartTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerStartTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.StaticBoxSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StaticBoxSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Ping_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Ping_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pong) > 0 {
		i -= len(m.Pong)
		copy(dAtA[i:], m.Pong)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pong)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Kryptos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kryptos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kryptos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Kryptos_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kryptos_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kryptos_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Kryptos_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kryptos_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kryptos_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintApi(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TpyoEnocde) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpyoEnocde) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpyoEnocde) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TpyoEnocde_Ipunt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpyoEnocde_Ipunt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpyoEnocde_Ipunt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Form) > 0 {
		i -= len(m.Form)
		copy(dAtA[i:], m.Form)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Form)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TpyoEnocde_Ouptut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpyoEnocde_Ouptut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpyoEnocde_Ouptut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintApi(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Numberinfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Numberinfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Numberinfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Numberinfo_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Numberinfo_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Numberinfo_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Number))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Numberinfo_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Numberinfo_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Numberinfo_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Facts) > 0 {
		for k := range m.Facts {
			v := m.Facts[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Moijaime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Moijaime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Moijaime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Moijaime_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Moijaime_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Moijaime_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Moijaime_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Moijaime_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Moijaime_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kiffs) > 0 {
		for iNdEx := len(m.Kiffs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Kiffs[iNdEx])
			copy(dAtA[i:], m.Kiffs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Kiffs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Wotd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wotd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wotd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Wotd_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wotd_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wotd_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Wotd_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wotd_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wotd_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlternateLogo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlternateLogo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlternateLogo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AlternateLogo_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlternateLogo_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlternateLogo_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AlternateLogo_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlternateLogo_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlternateLogo_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpreadshirtRandom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtRandom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtRandom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SpreadshirtRandom_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtRandom_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtRandom_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SpreadshirtRandom_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtRandom_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtRandom_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SpreadshirtAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SpreadshirtAll_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtAll_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtAll_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SpreadshirtAll_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpreadshirtAll_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpreadshirtAll_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Recettator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recettator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recettator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Recettator_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recettator_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recettator_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Steps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Steps))
		i--
		dAtA[i] = 0x20
	}
	if m.SecondaryIngredients != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SecondaryIngredients))
		i--
		dAtA[i] = 0x18
	}
	if m.MainIngredients != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MainIngredients))
		i--
		dAtA[i] = 0x10
	}
	if m.Seed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Recettator_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recettator_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recettator_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SecondaryIngredients) > 0 {
		for iNdEx := len(m.SecondaryIngredients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecondaryIngredients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MainIngredients) > 0 {
		for iNdEx := len(m.MainIngredients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MainIngredients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Steps) > 0 {
		for iNdEx := len(m.Steps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Steps[iNdEx])
			copy(dAtA[i:], m.Steps[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Steps[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Markdown) > 0 {
		i -= len(m.Markdown)
		copy(dAtA[i:], m.Markdown)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Markdown)))
		i--
		dAtA[i] = 0x1a
	}
	if m.People != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.People))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Recettator_Ingredient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recettator_Ingredient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recettator_Ingredient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NameAndQuantity) > 0 {
		i -= len(m.NameAndQuantity)
		copy(dAtA[i:], m.NameAndQuantity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameAndQuantity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x32
	}
	if m.Multiple {
		i--
		if m.Multiple {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Quantity) > 0 {
		i -= len(m.Quantity)
		copy(dAtA[i:], m.Quantity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Quantity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Dashboard_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Dashboard_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Hackz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Hackz_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Hackz_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Crew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Crew_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Crew_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Crew != nil {
		l = m.Crew.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SoundcloudMe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudMe_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudMe_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Me != nil {
		l = m.Me.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SoundcloudPlaylists) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudPlaylists_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudPlaylists_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playlists != nil {
		l = m.Playlists.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SoundcloudPlaylist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudPlaylist_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlaylistId != 0 {
		n += 1 + sovApi(uint64(m.PlaylistId))
	}
	return n
}

func (m *SoundcloudPlaylist_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playlist != nil {
		l = m.Playlist.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SoundcloudTracks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudTracks_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudTracks_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tracks != nil {
		l = m.Tracks.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SoundcloudTrack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SoundcloudTrack_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrackId != 0 {
		n += 1 + sovApi(uint64(m.TrackId))
	}
	return n
}

func (m *SoundcloudTrack_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Track != nil {
		l = m.Track.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Metrics_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Metrics_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StaticBoxSize != 0 {
		n += 1 + sovApi(uint64(m.StaticBoxSize))
	}
	l = len(m.ServerStartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerCurrentTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerUptime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Ping_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Ping_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pong)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Kryptos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Kryptos_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Kryptos_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TpyoEnocde) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TpyoEnocde_Ipunt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Form)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TpyoEnocde_Ouptut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Numberinfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Numberinfo_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 5
	}
	return n
}

func (m *Numberinfo_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Facts) > 0 {
		for k, v := range m.Facts {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Moijaime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Moijaime_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Moijaime_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kiffs) > 0 {
		for _, s := range m.Kiffs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Wotd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Wotd_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Wotd_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AlternateLogo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AlternateLogo_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AlternateLogo_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SpreadshirtRandom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadshirtRandom_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadshirtRandom_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadshirtAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadshirtAll_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SpreadshirtAll_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Recettator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Recettator_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seed != 0 {
		n += 1 + sovApi(uint64(m.Seed))
	}
	if m.MainIngredients != 0 {
		n += 1 + sovApi(uint64(m.MainIngredients))
	}
	if m.SecondaryIngredients != 0 {
		n += 1 + sovApi(uint64(m.SecondaryIngredients))
	}
	if m.Steps != 0 {
		n += 1 + sovApi(uint64(m.Steps))
	}
	return n
}

func (m *Recettator_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.People != 0 {
		n += 1 + sovApi(uint64(m.People))
	}
	l = len(m.Markdown)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, s := range m.Steps {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.MainIngredients) > 0 {
		for _, e := range m.MainIngredients {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SecondaryIngredients) > 0 {
		for _, e := range m.SecondaryIngredients {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Seed != 0 {
		n += 1 + sovApi(uint64(m.Seed))
	}
	return n
}

func (m *Recettator_Ingredient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Quantity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Multiple {
		n += 2
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NameAndQuantity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dashboard_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dashboard_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &dashboard.Entries{}
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hackz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hackz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hackz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hackz_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hackz_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = &dashboard.Entries{}
			}
			if err := m.Entries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Crew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Crew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Crew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Crew_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Crew_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crew", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crew == nil {
				m.Crew = &crew.Crew{}
			}
			if err := m.Crew.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudMe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoundcloudMe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoundcloudMe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudMe_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudMe_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Me", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Me == nil {
				m.Me = &soundcloud.User{}
			}
			if err := m.Me.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylists) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoundcloudPlaylists: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoundcloudPlaylists: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylists_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylists_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playlists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playlists == nil {
				m.Playlists = &soundcloud.Playlists{}
			}
			if err := m.Playlists.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoundcloudPlaylist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoundcloudPlaylist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylist_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaylistId", wireType)
			}
			m.PlaylistId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlaylistId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudPlaylist_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playlist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playlist == nil {
				m.Playlist = &soundcloud.Playlist{}
			}
			if err := m.Playlist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTracks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoundcloudTracks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoundcloudTracks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTracks_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTracks_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracks == nil {
				m.Tracks = &soundcloud.Tracks{}
			}
			if err := m.Tracks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTrack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoundcloudTrack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoundcloudTrack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTrack_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			m.TrackId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoundcloudTrack_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Track", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Track == nil {
				m.Track = &soundcloud.Track{}
			}
			if err := m.Track.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticBoxSize", wireType)
			}
			m.StaticBoxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaticBoxSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerCurrentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerCurrentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUptime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUptime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kryptos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kryptos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kryptos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kryptos_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kryptos_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpyoEnocde) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TpyoEnocde: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TpyoEnocde: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpyoEnocde_Ipunt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipunt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipunt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpyoEnocde_Ouptut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ouptut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ouptut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Numberinfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Numberinfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Numberinfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Numberinfo_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Number = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Numberinfo_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Facts == nil {
				m.Facts = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Facts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Moijaime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Moijaime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Moijaime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Moijaime_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Moijaime_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kiffs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kiffs = append(m.Kiffs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wotd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wotd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wotd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wotd_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wotd_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlternateLogo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlternateLogo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlternateLogo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlternateLogo_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlternateLogo_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtRandom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadshirtRandom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadshirtRandom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtRandom_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtRandom_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpreadshirtAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpreadshirtAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtAll_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpreadshirtAll_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recettator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recettator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recettator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recettator_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainIngredients", wireType)
			}
			m.MainIngredients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainIngredients |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryIngredients", wireType)
			}
			m.SecondaryIngredients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryIngredients |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			m.Steps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Steps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recettator_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field People", wireType)
			}
			m.People = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.People |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markdown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markdown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainIngredients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainIngredients = append(m.MainIngredients, &Recettator_Ingredient{})
			if err := m.MainIngredients[len(m.MainIngredients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryIngredients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryIngredients = append(m.SecondaryIngredients, &Recettator_Ingredient{})
			if err := m.SecondaryIngredients[len(m.SecondaryIngredients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recettator_Ingredient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ingredient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ingredient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Multiple = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameAndQuantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameAndQuantity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
