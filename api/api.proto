syntax = "proto3";

package calcbiz.server;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "google/protobuf/timestamp.proto";
import "pkg/crew/crew.proto";
import "pkg/dashboard/dashboard.proto";
import "pkg/soundcloud/soundcloud.proto";

option go_package = "ultre.me/calcbiz/api";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service Server {
  rpc KryptosEncrypt(KryptosInput) returns (KryptosOutput) {
    option (google.api.http) = {
      post: "/api/kryptos/encrypt"
      body: "*"
    };
  };
  rpc KryptosDecrypt(KryptosInput) returns (KryptosOutput) {
    option (google.api.http) = {
      post: "/api/kryptos/decrypt"
      body: "*"
    };
  };
  rpc TpyoEnocde(TpyoEnocdeIpunt) returns (TpyoEnocdeOuptut) {
    option (google.api.http) = {
      post: "/api/tpyo"
      body: "*"
    }; }

  rpc Ping(Void) returns (Pong) { option (google.api.http) = { get: "/api/ping" }; };
  rpc Dashboard(Void) returns (calcbiz.dashboard.Entries) { option (google.api.http) = {get: "/api/dashboard"}; }
  rpc Crew(Void) returns (calcbiz.crew.Crew) { option (google.api.http) = {get: "/api/crew"}; }
  rpc Numberinfo(NumberinfoInput) returns (NumberinfoOutput) { option (google.api.http) = {get: "/api/numberinfo/{number}"}; }
  rpc Recettator(RecettatorInput) returns (RecettatorOutput) { option (google.api.http) = {get: "/api/recettator"}; }
  rpc Moijaime(Void) returns (MoijaimeOutput) { option (google.api.http) = {get: "/api/moijaime"}; }
  rpc SpreadshirtRandom(Void) returns (SpreadshirtRandomOutput) { option (google.api.http) = {get: "/api/spreadshirt/random"}; }
  rpc SpreadshirtAll(Void) returns (SpreadshirtAllOutput) { option (google.api.http) = {get: "/api/spreadshirt/all"}; }
  rpc Wotd(Void) returns (WotdOutput) { option (google.api.http) = {get: "/api/wotd"}; }
  rpc AlternateLogo(Void) returns (AlternateLogoOutput) { option (google.api.http) = {get: "/api/alternate-logo"}; }
  rpc SoundcloudMe(Void) returns (calcbiz.soundcloud.User) { option (google.api.http) = {get: "/api/soundcloud/me"}; }
  rpc SoundcloudPlaylists(Void) returns (calcbiz.soundcloud.Playlists) { option (google.api.http) = {get: "/api/soundcloud/playlists"}; }
  rpc SoundcloudPlaylist(SoundcloudPlaylistInput) returns (calcbiz.soundcloud.Playlist) { option (google.api.http) = {get: "/api/soundcloud/playlists/{playlist_id}"}; }
  rpc SoundcloudTracks(Void) returns (calcbiz.soundcloud.Tracks) { option (google.api.http) = {get: "/api/soundcloud/tracks"}; }
  rpc SoundcloudTrack(SoundcloudTrackInput) returns (calcbiz.soundcloud.Track) { option (google.api.http) = {get: "/api/soundcloud/tracks/{track_id}"}; }

  // SoundcloudAlbums
  // Airtable...
  // Amuse...
  // Distrokid...
  // Apple...
  // Musicbrainz...
  // Genius...
}

// general messages

message Void {}
message Pong { string pong = 1; }

// kryptos messages

message KryptosInput { string from = 1; }
message KryptosOutput { string to = 1; }

// tpyo megasess
message TpyoEnocdeIpunt { string form = 1; }
message TpyoEnocdeOuptut { string to = 1; }

// numberinfo messages
message NumberinfoInput { float number = 1; }
message NumberinfoOutput { map<string, string> facts = 1; }

// moijaime messages

message MoijaimeOutput { repeated string kiffs = 1; }

// random messages

message WotdOutput { string word = 1; }
message AlternateLogoOutput { string path = 1; }

// spreadshirt messages

message SpreadshirtRandomOutput { /* TODO */ }
message SpreadshirtAllOutput { /* TODO */ }

// soundcloud messages

message SoundcloudPlaylistInput {
  uint64 playlist_id = 1;
}
message SoundcloudTrackInput {
  uint64 track_id = 1;
}

// recettator messages

message RecettatorInput {
  int64 seed = 1;
  uint64 main_ingredients = 2;
  uint64 secondary_ingredients = 3;
  uint64 steps = 4;
}
message RecettatorIngredient {
  string name = 1;
  string quantity = 2;
  string method = 3;
  string gender = 4;
  bool multiple = 5;
  string kind = 6;
  string name_and_quantity = 7;
}
message RecettatorOutput {
  string title = 1;
  uint64 people = 2;
  string markdown = 3;
  repeated string steps = 4;
  repeated RecettatorIngredient main_ingredients = 5;
  repeated RecettatorIngredient secondary_ingredients = 6;
  int64 seed = 7;
  //string json = 4;
}
