syntax = "proto3";

package calcbiz.calcapi;

import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "crew.proto";
import "dashboard.proto";
import "soundcloud.proto";

option go_package = "ultre.me/calcbiz/pkg/calcapi";
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service Service {
  rpc KryptosEncrypt(Kryptos.Input) returns (Kryptos.Output) { option (google.api.http) = { post: "/api/kryptos/encrypt"; body: "*" }; };
  rpc KryptosDecrypt(Kryptos.Input) returns (Kryptos.Output) { option (google.api.http) = { post: "/api/kryptos/decrypt"; body: "*" }; };
  rpc TpyoEnocde(TpyoEnocde.Ipunt) returns (TpyoEnocde.Ouptut) { option (google.api.http) = { post: "/api/tpyo"; body: "*" }; };
  rpc Ping(Ping.Input) returns (Ping.Output) { option (google.api.http) = { get: "/api/ping" }; };
  rpc Dashboard(Dashboard.Input) returns (Dashboard.Output) { option (google.api.http) = {get: "/api/dashboard"}; }
  rpc Hackz(Hackz.Input) returns (Hackz.Output) { option (google.api.http) = {get: "/api/hackz"}; }
  rpc Crew(Crew.Input) returns (Crew.Output) { option (google.api.http) = {get: "/api/crew"}; }
  rpc Numberinfo(Numberinfo.Input) returns (Numberinfo.Output) { option (google.api.http) = {get: "/api/numberinfo/{number}"}; }
  rpc Recettator(Recettator.Input) returns (Recettator.Output) { option (google.api.http) = {get: "/api/recettator"}; }
  rpc Moijaime(Moijaime.Input) returns (Moijaime.Output) { option (google.api.http) = {get: "/api/moijaime"}; }
  rpc SpreadshirtRandom(SpreadshirtRandom.Input) returns (SpreadshirtRandom.Output) { option (google.api.http) = {get: "/api/spreadshirt/random"}; }
  rpc SpreadshirtAll(SpreadshirtAll.Input) returns (SpreadshirtAll.Output) { option (google.api.http) = {get: "/api/spreadshirt/all"}; }
  rpc Wotd(Wotd.Input) returns (Wotd.Output) { option (google.api.http) = {get: "/api/wotd"}; }
  rpc AlternateLogo(AlternateLogo.Input) returns (AlternateLogo.Output) { option (google.api.http) = {get: "/api/alternate-logo"}; }
  rpc SoundcloudMe(SoundcloudMe.Input) returns (SoundcloudMe.Output) { option (google.api.http) = {get: "/api/soundcloud/me"}; }
  rpc SoundcloudPlaylists(SoundcloudPlaylists.Input) returns (SoundcloudPlaylists.Output) { option (google.api.http) = {get: "/api/soundcloud/playlists"}; }
  rpc SoundcloudPlaylist(SoundcloudPlaylist.Input) returns (SoundcloudPlaylist.Output) { option (google.api.http) = {get: "/api/soundcloud/playlists/{playlist_id}"}; }
  rpc SoundcloudTracks(SoundcloudTracks.Input) returns (SoundcloudTracks.Output) { option (google.api.http) = {get: "/api/soundcloud/tracks"}; }
  rpc SoundcloudTrack(SoundcloudTrack.Input) returns (SoundcloudTrack.Output) { option (google.api.http) = {get: "/api/soundcloud/tracks/{track_id}"}; }
  rpc Metrics(Metrics.Input) returns (Metrics.Output) { option (google.api.http) = {get: "/api/metrics"};}
  rpc CounterInc(CounterInc.Input) returns (CounterInc.Output) { option (google.api.http) = {get: "/api/counter-inc/{key}"}; };
  rpc NumberSetIfBigger(NumberSetIfBigger.Input) returns (NumberSetIfBigger.Output) { option (google.api.http) = {get: "/api/number-set-if-bigger/{key}/{value}"}; };
  rpc KeyValueStringSet(KeyValueStringSet.Input) returns (KeyValueStringSet.Output) { option (google.api.http) = { post: "/api/key-value-string-set/{key}"; body: "*" }; };
  rpc KeyValueStringGet(KeyValueStringGet.Input) returns (KeyValueStringGet.Output) { option (google.api.http) = { get: "/api/key-value-string-get/{key}"}; };
  rpc KeyValueFloatSet(KeyValueFloatSet.Input) returns (KeyValueFloatSet.Output) { option (google.api.http) = { post: "/api/key-value-float-set/{key}"; body: "*" }; };
  rpc KeyValueFloatGet(KeyValueFloatGet.Input) returns (KeyValueFloatGet.Output) { option (google.api.http) = { get: "/api/key-value-float-get/{key}"}; };
  rpc EchoStream(stream EchoStream.Input) returns (stream EchoStream.Output) { option (google.api.http) = {post: "/api/echo-stream", body: "*"}; };
  rpc TestReadStream(TestReadStream.Input) returns (stream TestReadStream.Output) { option (google.api.http) = {get: "/api/test-read-stream"}; };

  // SoundcloudAlbums
  // Airtable...
  // Amuse...
  // Distrokid...
  // Apple...
  // Musicbrainz...
  // Genius...
}

message EchoStream {
  message Input  { string msg = 1; }
  message Output { string msg = 1; }
}

message TestReadStream {
  message Input  {}
  message Output { string msg = 1; }
}

message CounterInc {
  message Input  { string key = 1; double gap = 2; }
  message Output { double value = 2; }
}

message NumberSetIfBigger {
  message Input  { string key = 1; double value = 2; }
  message Output { double value = 2; }
}

message KeyValueStringSet {
  message Input  { string key = 1; string value = 2; }
  message Output {}
}

message KeyValueStringGet {
  message Input  { string key = 1; }
  message Output { string value = 2; }
}

message KeyValueFloatSet {
  message Input  { string key = 1; double value = 2; }
  message Output {}
}

message KeyValueFloatGet {
  message Input  { string key = 1; }
  message Output { double value = 2; }
}

message Dashboard {
  message Input  {}
  message Output { calcbiz.dashboard.Entries entries = 1; }
}

message Hackz {
  message Input  {}
  message Output { calcbiz.dashboard.Entries entries = 1; }
}

message Crew {
  message Input  {}
  message Output { calcbiz.crew.Crew crew = 1; }
}

message SoundcloudMe {
  message Input  {}
  message Output { calcbiz.soundcloud.User me = 1; }
}

message SoundcloudPlaylists {
  message Input  {}
  message Output { calcbiz.soundcloud.Playlists playlists = 1; }
}

message SoundcloudPlaylist {
  message Input  { uint64 playlist_id = 1; }
  message Output { calcbiz.soundcloud.Playlist playlist = 1; }
}

message SoundcloudTracks {
  message Input  {}
  message Output { calcbiz.soundcloud.Tracks tracks = 1; }
}

message SoundcloudTrack {
  message Input  { uint64 track_id = 1; }
  message Output { calcbiz.soundcloud.Track track = 1; }
}

message Metrics {
  message Input  {}
  message Output {
    int32 static_box_size = 1;
    string server_start_time = 2;
    string server_current_time = 3;
    string server_uptime = 4;
    // int32 requests = 4;
  }
}

message Ping {
  message Input  {}
  message Output { string pong = 1; }
}

message Kryptos {
  message Input  { string from = 1; }
  message Output { string to = 1; }
}

message TpyoEnocde {
  message Ipunt  { string form = 1; }
  message Ouptut { string to = 1; }
}

message Numberinfo {
  message Input  { float number = 1; }
  message Output { map<string, string> facts = 1; }
}

message Moijaime {
  message Input  {}
  message Output { repeated string kiffs = 1; }
}

message Wotd {
  message Input  {}
  message Output { string word = 1; }
}

message AlternateLogo {
  message Input  {}
  message Output { string path = 1; }
}

message SpreadshirtRandom {
  message Input  {}
  message Output { /* TODO */ }
}

message SpreadshirtAll {
  message Input  {}
  message Output { /* TODO */ }
}

message Recettator {
  message Input  {
    int64 seed = 1;
    uint64 main_ingredients = 2;
    uint64 secondary_ingredients = 3;
    uint64 steps = 4;
  }
  message Output {
    string title = 1;
    uint64 people = 2;
    string markdown = 3;
    repeated string steps = 4;
    repeated Ingredient main_ingredients = 5;
    repeated Ingredient secondary_ingredients = 6;
    int64 seed = 7;
    //string json = 4;
  }
  message Ingredient {
    string name = 1;
    string quantity = 2;
    string method = 3;
    string gender = 4;
    bool multiple = 5;
    string kind = 6;
    string name_and_quantity = 7;
  }
}

//// socket.io

message SIO {

  message Join {
    message Input {
      string room = 1;
      Peer peer = 2;
    }
    message Output {
      repeated Peer peers = 1;
    }
    message Event {
      string room = 1;
      Peer peer = 2;
    }
  }

  message Broadcast {
    message Input {
      string room = 1;
      string msg = 2;
    }
    message Output {}
    message Event {
      string room = 1;
      string msg = 2;
      Peer peer = 3;
    }
  }

  message Disconnect {
    message Event {
      string room = 1;
      Peer peer = 2;
    }
  }

  message Error {
    bool is_error = 1;
    string err_msg = 2;
  }

  message Peer {
    string name = 1;
    string color = 2;
  }

  message Context {
    Peer peer = 1;
    bool no_metadata = 2;
    // int32 joined_at = 3;
  }

}